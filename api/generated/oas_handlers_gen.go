// Code generated by ogen, DO NOT EDIT.

package apiModels

import (
	"context"
	"net/http"

	"github.com/go-faster/errors"

	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
)

func recordError(string, error) {}

// handleGetBlockchainBlocksRequest handles getBlockchainBlocks operation.
//
// Get blocks list on blockchain.
//
// GET /blocks/{blockchain}
func (s *Server) handleGetBlockchainBlocksRequest(args [1]string, argsEscaped bool, w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var (
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: "GetBlockchainBlocks",
			ID:   "getBlockchainBlocks",
		}
	)
	params, err := decodeGetBlockchainBlocksParams(args, argsEscaped, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		defer recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	var response GetBlockchainBlocksRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:          ctx,
			OperationName:    "GetBlockchainBlocks",
			OperationSummary: "Get blocks list on blockchain",
			OperationID:      "getBlockchainBlocks",
			Body:             nil,
			Params: middleware.Parameters{
				{
					Name: "blockchain",
					In:   "path",
				}: params.Blockchain,
				{
					Name: "limit",
					In:   "query",
				}: params.Limit,
				{
					Name: "offset",
					In:   "query",
				}: params.Offset,
				{
					Name: "sorts",
					In:   "query",
				}: params.Sorts,
				{
					Name: "miner",
					In:   "query",
				}: params.Miner,
				{
					Name: "miner_hashrate",
					In:   "query",
				}: params.MinerHashrate,
				{
					Name: "block_hash",
					In:   "query",
				}: params.BlockHash,
				{
					Name: "share_difficulty",
					In:   "query",
				}: params.ShareDifficulty,
				{
					Name: "round_miners_count",
					In:   "query",
				}: params.RoundMinersCount,
				{
					Name: "mined_at",
					In:   "query",
				}: params.MinedAt,
			},
			Raw: r,
		}

		type (
			Request  = struct{}
			Params   = GetBlockchainBlocksParams
			Response = GetBlockchainBlocksRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackGetBlockchainBlocksParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.GetBlockchainBlocks(ctx, params)
				return response, err
			},
		)
	} else {
		response, err = s.h.GetBlockchainBlocks(ctx, params)
	}
	if err != nil {
		defer recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeGetBlockchainBlocksResponse(response, w); err != nil {
		defer recordError("EncodeResponse", err)
		if !errors.Is(err, ht.ErrInternalServerErrorResponse) {
			s.cfg.ErrorHandler(ctx, w, r, err)
		}
		return
	}
}

// handleGetBlockchainMarketsRequest handles getBlockchainMarkets operation.
//
// Get blockchain markets.
//
// GET /prices/{blockchain}
func (s *Server) handleGetBlockchainMarketsRequest(args [1]string, argsEscaped bool, w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var (
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: "GetBlockchainMarkets",
			ID:   "getBlockchainMarkets",
		}
	)
	params, err := decodeGetBlockchainMarketsParams(args, argsEscaped, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		defer recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	var response GetBlockchainMarketsRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:          ctx,
			OperationName:    "GetBlockchainMarkets",
			OperationSummary: "Get blockchain markets",
			OperationID:      "getBlockchainMarkets",
			Body:             nil,
			Params: middleware.Parameters{
				{
					Name: "blockchain",
					In:   "path",
				}: params.Blockchain,
			},
			Raw: r,
		}

		type (
			Request  = struct{}
			Params   = GetBlockchainMarketsParams
			Response = GetBlockchainMarketsRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackGetBlockchainMarketsParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.GetBlockchainMarkets(ctx, params)
				return response, err
			},
		)
	} else {
		response, err = s.h.GetBlockchainMarkets(ctx, params)
	}
	if err != nil {
		defer recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeGetBlockchainMarketsResponse(response, w); err != nil {
		defer recordError("EncodeResponse", err)
		if !errors.Is(err, ht.ErrInternalServerErrorResponse) {
			s.cfg.ErrorHandler(ctx, w, r, err)
		}
		return
	}
}

// handleGetBlockchainMinerRequest handles getBlockchainMiner operation.
//
// Get miner info on blockchain.
//
// GET /miners/{blockchain}/miner/{miner}
func (s *Server) handleGetBlockchainMinerRequest(args [2]string, argsEscaped bool, w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var (
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: "GetBlockchainMiner",
			ID:   "getBlockchainMiner",
		}
	)
	params, err := decodeGetBlockchainMinerParams(args, argsEscaped, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		defer recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	var response GetBlockchainMinerRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:          ctx,
			OperationName:    "GetBlockchainMiner",
			OperationSummary: "Get miner info on blockchain",
			OperationID:      "getBlockchainMiner",
			Body:             nil,
			Params: middleware.Parameters{
				{
					Name: "blockchain",
					In:   "path",
				}: params.Blockchain,
				{
					Name: "miner",
					In:   "path",
				}: params.Miner,
			},
			Raw: r,
		}

		type (
			Request  = struct{}
			Params   = GetBlockchainMinerParams
			Response = GetBlockchainMinerRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackGetBlockchainMinerParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.GetBlockchainMiner(ctx, params)
				return response, err
			},
		)
	} else {
		response, err = s.h.GetBlockchainMiner(ctx, params)
	}
	if err != nil {
		defer recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeGetBlockchainMinerResponse(response, w); err != nil {
		defer recordError("EncodeResponse", err)
		if !errors.Is(err, ht.ErrInternalServerErrorResponse) {
			s.cfg.ErrorHandler(ctx, w, r, err)
		}
		return
	}
}

// handleGetBlockchainMinerBalanceRequest handles getBlockchainMinerBalance operation.
//
// Get miner balance on blockchain.
//
// GET /payouts/{blockchain}/balance/{miner}
func (s *Server) handleGetBlockchainMinerBalanceRequest(args [2]string, argsEscaped bool, w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var (
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: "GetBlockchainMinerBalance",
			ID:   "getBlockchainMinerBalance",
		}
	)
	params, err := decodeGetBlockchainMinerBalanceParams(args, argsEscaped, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		defer recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	var response GetBlockchainMinerBalanceRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:          ctx,
			OperationName:    "GetBlockchainMinerBalance",
			OperationSummary: "Get miner balance on blockchain",
			OperationID:      "getBlockchainMinerBalance",
			Body:             nil,
			Params: middleware.Parameters{
				{
					Name: "blockchain",
					In:   "path",
				}: params.Blockchain,
				{
					Name: "miner",
					In:   "path",
				}: params.Miner,
			},
			Raw: r,
		}

		type (
			Request  = struct{}
			Params   = GetBlockchainMinerBalanceParams
			Response = GetBlockchainMinerBalanceRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackGetBlockchainMinerBalanceParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.GetBlockchainMinerBalance(ctx, params)
				return response, err
			},
		)
	} else {
		response, err = s.h.GetBlockchainMinerBalance(ctx, params)
	}
	if err != nil {
		defer recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeGetBlockchainMinerBalanceResponse(response, w); err != nil {
		defer recordError("EncodeResponse", err)
		if !errors.Is(err, ht.ErrInternalServerErrorResponse) {
			s.cfg.ErrorHandler(ctx, w, r, err)
		}
		return
	}
}

// handleGetBlockchainMinerHashratesChartRequest handles getBlockchainMinerHashratesChart operation.
//
// Get miner hashrates chart points.
//
// GET /charts/{blockchain}/miner/{miner}/hashrates
func (s *Server) handleGetBlockchainMinerHashratesChartRequest(args [2]string, argsEscaped bool, w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var (
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: "GetBlockchainMinerHashratesChart",
			ID:   "getBlockchainMinerHashratesChart",
		}
	)
	params, err := decodeGetBlockchainMinerHashratesChartParams(args, argsEscaped, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		defer recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	var response GetBlockchainMinerHashratesChartRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:          ctx,
			OperationName:    "GetBlockchainMinerHashratesChart",
			OperationSummary: "Get miner hashrates chart points",
			OperationID:      "getBlockchainMinerHashratesChart",
			Body:             nil,
			Params: middleware.Parameters{
				{
					Name: "blockchain",
					In:   "path",
				}: params.Blockchain,
				{
					Name: "miner",
					In:   "path",
				}: params.Miner,
				{
					Name: "period",
					In:   "query",
				}: params.Period,
				{
					Name: "solo",
					In:   "query",
				}: params.Solo,
			},
			Raw: r,
		}

		type (
			Request  = struct{}
			Params   = GetBlockchainMinerHashratesChartParams
			Response = GetBlockchainMinerHashratesChartRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackGetBlockchainMinerHashratesChartParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.GetBlockchainMinerHashratesChart(ctx, params)
				return response, err
			},
		)
	} else {
		response, err = s.h.GetBlockchainMinerHashratesChart(ctx, params)
	}
	if err != nil {
		defer recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeGetBlockchainMinerHashratesChartResponse(response, w); err != nil {
		defer recordError("EncodeResponse", err)
		if !errors.Is(err, ht.ErrInternalServerErrorResponse) {
			s.cfg.ErrorHandler(ctx, w, r, err)
		}
		return
	}
}

// handleGetBlockchainMinerProfitabilitiesChartRequest handles getBlockchainMinerProfitabilitiesChart operation.
//
// Get miner profitabilities chart points.
//
// GET /charts/{blockchain}/miner/{miner}/profitabilities
func (s *Server) handleGetBlockchainMinerProfitabilitiesChartRequest(args [2]string, argsEscaped bool, w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var (
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: "GetBlockchainMinerProfitabilitiesChart",
			ID:   "getBlockchainMinerProfitabilitiesChart",
		}
	)
	params, err := decodeGetBlockchainMinerProfitabilitiesChartParams(args, argsEscaped, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		defer recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	var response GetBlockchainMinerProfitabilitiesChartRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:          ctx,
			OperationName:    "GetBlockchainMinerProfitabilitiesChart",
			OperationSummary: "Get miner profitabilities chart points",
			OperationID:      "getBlockchainMinerProfitabilitiesChart",
			Body:             nil,
			Params: middleware.Parameters{
				{
					Name: "blockchain",
					In:   "path",
				}: params.Blockchain,
				{
					Name: "miner",
					In:   "path",
				}: params.Miner,
				{
					Name: "period",
					In:   "query",
				}: params.Period,
				{
					Name: "solo",
					In:   "query",
				}: params.Solo,
			},
			Raw: r,
		}

		type (
			Request  = struct{}
			Params   = GetBlockchainMinerProfitabilitiesChartParams
			Response = GetBlockchainMinerProfitabilitiesChartRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackGetBlockchainMinerProfitabilitiesChartParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.GetBlockchainMinerProfitabilitiesChart(ctx, params)
				return response, err
			},
		)
	} else {
		response, err = s.h.GetBlockchainMinerProfitabilitiesChart(ctx, params)
	}
	if err != nil {
		defer recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeGetBlockchainMinerProfitabilitiesChartResponse(response, w); err != nil {
		defer recordError("EncodeResponse", err)
		if !errors.Is(err, ht.ErrInternalServerErrorResponse) {
			s.cfg.ErrorHandler(ctx, w, r, err)
		}
		return
	}
}

// handleGetBlockchainMinerSharesChartRequest handles getBlockchainMinerSharesChart operation.
//
// Get miner shares chart points.
//
// GET /charts/{blockchain}/miner/{miner}/shares
func (s *Server) handleGetBlockchainMinerSharesChartRequest(args [2]string, argsEscaped bool, w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var (
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: "GetBlockchainMinerSharesChart",
			ID:   "getBlockchainMinerSharesChart",
		}
	)
	params, err := decodeGetBlockchainMinerSharesChartParams(args, argsEscaped, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		defer recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	var response GetBlockchainMinerSharesChartRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:          ctx,
			OperationName:    "GetBlockchainMinerSharesChart",
			OperationSummary: "Get miner shares chart points",
			OperationID:      "getBlockchainMinerSharesChart",
			Body:             nil,
			Params: middleware.Parameters{
				{
					Name: "blockchain",
					In:   "path",
				}: params.Blockchain,
				{
					Name: "miner",
					In:   "path",
				}: params.Miner,
				{
					Name: "period",
					In:   "query",
				}: params.Period,
				{
					Name: "solo",
					In:   "query",
				}: params.Solo,
			},
			Raw: r,
		}

		type (
			Request  = struct{}
			Params   = GetBlockchainMinerSharesChartParams
			Response = GetBlockchainMinerSharesChartRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackGetBlockchainMinerSharesChartParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.GetBlockchainMinerSharesChart(ctx, params)
				return response, err
			},
		)
	} else {
		response, err = s.h.GetBlockchainMinerSharesChart(ctx, params)
	}
	if err != nil {
		defer recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeGetBlockchainMinerSharesChartResponse(response, w); err != nil {
		defer recordError("EncodeResponse", err)
		if !errors.Is(err, ht.ErrInternalServerErrorResponse) {
			s.cfg.ErrorHandler(ctx, w, r, err)
		}
		return
	}
}

// handleGetBlockchainMinerWorkerHashratesChartRequest handles getBlockchainMinerWorkerHashratesChart operation.
//
// Get miner worker hashrates chart points.
//
// GET /charts/{blockchain}/miner/{miner}/worker/{worker}/hashrates
func (s *Server) handleGetBlockchainMinerWorkerHashratesChartRequest(args [3]string, argsEscaped bool, w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var (
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: "GetBlockchainMinerWorkerHashratesChart",
			ID:   "getBlockchainMinerWorkerHashratesChart",
		}
	)
	params, err := decodeGetBlockchainMinerWorkerHashratesChartParams(args, argsEscaped, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		defer recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	var response GetBlockchainMinerWorkerHashratesChartRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:          ctx,
			OperationName:    "GetBlockchainMinerWorkerHashratesChart",
			OperationSummary: "Get miner worker hashrates chart points",
			OperationID:      "getBlockchainMinerWorkerHashratesChart",
			Body:             nil,
			Params: middleware.Parameters{
				{
					Name: "blockchain",
					In:   "path",
				}: params.Blockchain,
				{
					Name: "miner",
					In:   "path",
				}: params.Miner,
				{
					Name: "worker",
					In:   "path",
				}: params.Worker,
				{
					Name: "period",
					In:   "query",
				}: params.Period,
			},
			Raw: r,
		}

		type (
			Request  = struct{}
			Params   = GetBlockchainMinerWorkerHashratesChartParams
			Response = GetBlockchainMinerWorkerHashratesChartRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackGetBlockchainMinerWorkerHashratesChartParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.GetBlockchainMinerWorkerHashratesChart(ctx, params)
				return response, err
			},
		)
	} else {
		response, err = s.h.GetBlockchainMinerWorkerHashratesChart(ctx, params)
	}
	if err != nil {
		defer recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeGetBlockchainMinerWorkerHashratesChartResponse(response, w); err != nil {
		defer recordError("EncodeResponse", err)
		if !errors.Is(err, ht.ErrInternalServerErrorResponse) {
			s.cfg.ErrorHandler(ctx, w, r, err)
		}
		return
	}
}

// handleGetBlockchainMinerWorkerSharesChartRequest handles getBlockchainMinerWorkerSharesChart operation.
//
// Get miner worker shares chart points.
//
// GET /charts/{blockchain}/miner/{miner}/worker/{worker}/shares
func (s *Server) handleGetBlockchainMinerWorkerSharesChartRequest(args [3]string, argsEscaped bool, w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var (
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: "GetBlockchainMinerWorkerSharesChart",
			ID:   "getBlockchainMinerWorkerSharesChart",
		}
	)
	params, err := decodeGetBlockchainMinerWorkerSharesChartParams(args, argsEscaped, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		defer recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	var response GetBlockchainMinerWorkerSharesChartRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:          ctx,
			OperationName:    "GetBlockchainMinerWorkerSharesChart",
			OperationSummary: "Get miner worker shares chart points",
			OperationID:      "getBlockchainMinerWorkerSharesChart",
			Body:             nil,
			Params: middleware.Parameters{
				{
					Name: "blockchain",
					In:   "path",
				}: params.Blockchain,
				{
					Name: "miner",
					In:   "path",
				}: params.Miner,
				{
					Name: "worker",
					In:   "path",
				}: params.Worker,
				{
					Name: "period",
					In:   "query",
				}: params.Period,
			},
			Raw: r,
		}

		type (
			Request  = struct{}
			Params   = GetBlockchainMinerWorkerSharesChartParams
			Response = GetBlockchainMinerWorkerSharesChartRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackGetBlockchainMinerWorkerSharesChartParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.GetBlockchainMinerWorkerSharesChart(ctx, params)
				return response, err
			},
		)
	} else {
		response, err = s.h.GetBlockchainMinerWorkerSharesChart(ctx, params)
	}
	if err != nil {
		defer recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeGetBlockchainMinerWorkerSharesChartResponse(response, w); err != nil {
		defer recordError("EncodeResponse", err)
		if !errors.Is(err, ht.ErrInternalServerErrorResponse) {
			s.cfg.ErrorHandler(ctx, w, r, err)
		}
		return
	}
}

// handleGetBlockchainMinerWorkersRequest handles getBlockchainMinerWorkers operation.
//
// Get miner workers list on blockchain.
//
// GET /miners/{blockchain}/workers/{miner}
func (s *Server) handleGetBlockchainMinerWorkersRequest(args [2]string, argsEscaped bool, w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var (
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: "GetBlockchainMinerWorkers",
			ID:   "getBlockchainMinerWorkers",
		}
	)
	params, err := decodeGetBlockchainMinerWorkersParams(args, argsEscaped, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		defer recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	var response GetBlockchainMinerWorkersRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:          ctx,
			OperationName:    "GetBlockchainMinerWorkers",
			OperationSummary: "Get miner workers list on blockchain",
			OperationID:      "getBlockchainMinerWorkers",
			Body:             nil,
			Params: middleware.Parameters{
				{
					Name: "blockchain",
					In:   "path",
				}: params.Blockchain,
				{
					Name: "miner",
					In:   "path",
				}: params.Miner,
			},
			Raw: r,
		}

		type (
			Request  = struct{}
			Params   = GetBlockchainMinerWorkersParams
			Response = GetBlockchainMinerWorkersRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackGetBlockchainMinerWorkersParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.GetBlockchainMinerWorkers(ctx, params)
				return response, err
			},
		)
	} else {
		response, err = s.h.GetBlockchainMinerWorkers(ctx, params)
	}
	if err != nil {
		defer recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeGetBlockchainMinerWorkersResponse(response, w); err != nil {
		defer recordError("EncodeResponse", err)
		if !errors.Is(err, ht.ErrInternalServerErrorResponse) {
			s.cfg.ErrorHandler(ctx, w, r, err)
		}
		return
	}
}

// handleGetBlockchainMinersRequest handles getBlockchainMiners operation.
//
// Get miners list on blockchain.
//
// GET /miners/{blockchain}
func (s *Server) handleGetBlockchainMinersRequest(args [1]string, argsEscaped bool, w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var (
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: "GetBlockchainMiners",
			ID:   "getBlockchainMiners",
		}
	)
	params, err := decodeGetBlockchainMinersParams(args, argsEscaped, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		defer recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	var response GetBlockchainMinersRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:          ctx,
			OperationName:    "GetBlockchainMiners",
			OperationSummary: "Get miners list on blockchain",
			OperationID:      "getBlockchainMiners",
			Body:             nil,
			Params: middleware.Parameters{
				{
					Name: "blockchain",
					In:   "path",
				}: params.Blockchain,
				{
					Name: "limit",
					In:   "query",
				}: params.Limit,
				{
					Name: "offset",
					In:   "query",
				}: params.Offset,
				{
					Name: "sorts",
					In:   "query",
				}: params.Sorts,
				{
					Name: "address",
					In:   "query",
				}: params.Address,
				{
					Name: "hashrate",
					In:   "query",
				}: params.Hashrate,
				{
					Name: "workers_count",
					In:   "query",
				}: params.WorkersCount,
				{
					Name: "blocks_count",
					In:   "query",
				}: params.BlocksCount,
				{
					Name: "solo_blocks_count",
					In:   "query",
				}: params.SoloBlocksCount,
				{
					Name: "joined_at",
					In:   "query",
				}: params.JoinedAt,
			},
			Raw: r,
		}

		type (
			Request  = struct{}
			Params   = GetBlockchainMinersParams
			Response = GetBlockchainMinersRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackGetBlockchainMinersParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.GetBlockchainMiners(ctx, params)
				return response, err
			},
		)
	} else {
		response, err = s.h.GetBlockchainMiners(ctx, params)
	}
	if err != nil {
		defer recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeGetBlockchainMinersResponse(response, w); err != nil {
		defer recordError("EncodeResponse", err)
		if !errors.Is(err, ht.ErrInternalServerErrorResponse) {
			s.cfg.ErrorHandler(ctx, w, r, err)
		}
		return
	}
}

// handleGetBlockchainPayoutsRequest handles getBlockchainPayouts operation.
//
// Get payouts list on blockchain.
//
// GET /payouts/{blockchain}
func (s *Server) handleGetBlockchainPayoutsRequest(args [1]string, argsEscaped bool, w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var (
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: "GetBlockchainPayouts",
			ID:   "getBlockchainPayouts",
		}
	)
	params, err := decodeGetBlockchainPayoutsParams(args, argsEscaped, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		defer recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	var response GetBlockchainPayoutsRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:          ctx,
			OperationName:    "GetBlockchainPayouts",
			OperationSummary: "Get payouts list on blockchain",
			OperationID:      "getBlockchainPayouts",
			Body:             nil,
			Params: middleware.Parameters{
				{
					Name: "blockchain",
					In:   "path",
				}: params.Blockchain,
				{
					Name: "limit",
					In:   "query",
				}: params.Limit,
				{
					Name: "offset",
					In:   "query",
				}: params.Offset,
				{
					Name: "sorts",
					In:   "query",
				}: params.Sorts,
				{
					Name: "miner",
					In:   "query",
				}: params.Miner,
				{
					Name: "tx_hash",
					In:   "query",
				}: params.TxHash,
				{
					Name: "amount",
					In:   "query",
				}: params.Amount,
				{
					Name: "paid_at",
					In:   "query",
				}: params.PaidAt,
			},
			Raw: r,
		}

		type (
			Request  = struct{}
			Params   = GetBlockchainPayoutsParams
			Response = GetBlockchainPayoutsRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackGetBlockchainPayoutsParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.GetBlockchainPayouts(ctx, params)
				return response, err
			},
		)
	} else {
		response, err = s.h.GetBlockchainPayouts(ctx, params)
	}
	if err != nil {
		defer recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeGetBlockchainPayoutsResponse(response, w); err != nil {
		defer recordError("EncodeResponse", err)
		if !errors.Is(err, ht.ErrInternalServerErrorResponse) {
			s.cfg.ErrorHandler(ctx, w, r, err)
		}
		return
	}
}

// handleGetBlockchainPoolRequest handles getBlockchainPool operation.
//
// Get full pool data on blockchain.
//
// GET /pools/{blockchain}
func (s *Server) handleGetBlockchainPoolRequest(args [1]string, argsEscaped bool, w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var (
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: "GetBlockchainPool",
			ID:   "getBlockchainPool",
		}
	)
	params, err := decodeGetBlockchainPoolParams(args, argsEscaped, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		defer recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	var response GetBlockchainPoolRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:          ctx,
			OperationName:    "GetBlockchainPool",
			OperationSummary: "Get full pool data on blockchain",
			OperationID:      "getBlockchainPool",
			Body:             nil,
			Params: middleware.Parameters{
				{
					Name: "blockchain",
					In:   "path",
				}: params.Blockchain,
				{
					Name: "solo",
					In:   "query",
				}: params.Solo,
			},
			Raw: r,
		}

		type (
			Request  = struct{}
			Params   = GetBlockchainPoolParams
			Response = GetBlockchainPoolRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackGetBlockchainPoolParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.GetBlockchainPool(ctx, params)
				return response, err
			},
		)
	} else {
		response, err = s.h.GetBlockchainPool(ctx, params)
	}
	if err != nil {
		defer recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeGetBlockchainPoolResponse(response, w); err != nil {
		defer recordError("EncodeResponse", err)
		if !errors.Is(err, ht.ErrInternalServerErrorResponse) {
			s.cfg.ErrorHandler(ctx, w, r, err)
		}
		return
	}
}

// handleGetBlockchainPoolDifficultiesChartRequest handles getBlockchainPoolDifficultiesChart operation.
//
// Get pool difficulties chart points.
//
// GET /charts/{blockchain}/pool_difficulties
func (s *Server) handleGetBlockchainPoolDifficultiesChartRequest(args [1]string, argsEscaped bool, w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var (
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: "GetBlockchainPoolDifficultiesChart",
			ID:   "getBlockchainPoolDifficultiesChart",
		}
	)
	params, err := decodeGetBlockchainPoolDifficultiesChartParams(args, argsEscaped, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		defer recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	var response GetBlockchainPoolDifficultiesChartRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:          ctx,
			OperationName:    "GetBlockchainPoolDifficultiesChart",
			OperationSummary: "Get pool difficulties chart points",
			OperationID:      "getBlockchainPoolDifficultiesChart",
			Body:             nil,
			Params: middleware.Parameters{
				{
					Name: "blockchain",
					In:   "path",
				}: params.Blockchain,
				{
					Name: "period",
					In:   "query",
				}: params.Period,
				{
					Name: "solo",
					In:   "query",
				}: params.Solo,
			},
			Raw: r,
		}

		type (
			Request  = struct{}
			Params   = GetBlockchainPoolDifficultiesChartParams
			Response = GetBlockchainPoolDifficultiesChartRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackGetBlockchainPoolDifficultiesChartParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.GetBlockchainPoolDifficultiesChart(ctx, params)
				return response, err
			},
		)
	} else {
		response, err = s.h.GetBlockchainPoolDifficultiesChart(ctx, params)
	}
	if err != nil {
		defer recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeGetBlockchainPoolDifficultiesChartResponse(response, w); err != nil {
		defer recordError("EncodeResponse", err)
		if !errors.Is(err, ht.ErrInternalServerErrorResponse) {
			s.cfg.ErrorHandler(ctx, w, r, err)
		}
		return
	}
}

// handleGetBlockchainPoolInfoRequest handles getBlockchainPoolInfo operation.
//
// Get pool info on blockchain.
//
// GET /pools/{blockchain}/info
func (s *Server) handleGetBlockchainPoolInfoRequest(args [1]string, argsEscaped bool, w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var (
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: "GetBlockchainPoolInfo",
			ID:   "getBlockchainPoolInfo",
		}
	)
	params, err := decodeGetBlockchainPoolInfoParams(args, argsEscaped, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		defer recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	var response GetBlockchainPoolInfoRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:          ctx,
			OperationName:    "GetBlockchainPoolInfo",
			OperationSummary: "Get pool info on blockchain",
			OperationID:      "getBlockchainPoolInfo",
			Body:             nil,
			Params: middleware.Parameters{
				{
					Name: "blockchain",
					In:   "path",
				}: params.Blockchain,
			},
			Raw: r,
		}

		type (
			Request  = struct{}
			Params   = GetBlockchainPoolInfoParams
			Response = GetBlockchainPoolInfoRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackGetBlockchainPoolInfoParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.GetBlockchainPoolInfo(ctx, params)
				return response, err
			},
		)
	} else {
		response, err = s.h.GetBlockchainPoolInfo(ctx, params)
	}
	if err != nil {
		defer recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeGetBlockchainPoolInfoResponse(response, w); err != nil {
		defer recordError("EncodeResponse", err)
		if !errors.Is(err, ht.ErrInternalServerErrorResponse) {
			s.cfg.ErrorHandler(ctx, w, r, err)
		}
		return
	}
}

// handleGetBlockchainPoolNetworkInfoRequest handles getBlockchainPoolNetworkInfo operation.
//
// Get pool blockchain network info.
//
// GET /pools/{blockchain}/network_info
func (s *Server) handleGetBlockchainPoolNetworkInfoRequest(args [1]string, argsEscaped bool, w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var (
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: "GetBlockchainPoolNetworkInfo",
			ID:   "getBlockchainPoolNetworkInfo",
		}
	)
	params, err := decodeGetBlockchainPoolNetworkInfoParams(args, argsEscaped, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		defer recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	var response GetBlockchainPoolNetworkInfoRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:          ctx,
			OperationName:    "GetBlockchainPoolNetworkInfo",
			OperationSummary: "Get pool blockchain network info",
			OperationID:      "getBlockchainPoolNetworkInfo",
			Body:             nil,
			Params: middleware.Parameters{
				{
					Name: "blockchain",
					In:   "path",
				}: params.Blockchain,
			},
			Raw: r,
		}

		type (
			Request  = struct{}
			Params   = GetBlockchainPoolNetworkInfoParams
			Response = GetBlockchainPoolNetworkInfoRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackGetBlockchainPoolNetworkInfoParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.GetBlockchainPoolNetworkInfo(ctx, params)
				return response, err
			},
		)
	} else {
		response, err = s.h.GetBlockchainPoolNetworkInfo(ctx, params)
	}
	if err != nil {
		defer recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeGetBlockchainPoolNetworkInfoResponse(response, w); err != nil {
		defer recordError("EncodeResponse", err)
		if !errors.Is(err, ht.ErrInternalServerErrorResponse) {
			s.cfg.ErrorHandler(ctx, w, r, err)
		}
		return
	}
}

// handleGetBlockchainPoolSlavesRequest handles getBlockchainPoolSlaves operation.
//
// Get pool locations on blockchain.
//
// GET /pools/{blockchain}/slaves
func (s *Server) handleGetBlockchainPoolSlavesRequest(args [1]string, argsEscaped bool, w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var (
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: "GetBlockchainPoolSlaves",
			ID:   "getBlockchainPoolSlaves",
		}
	)
	params, err := decodeGetBlockchainPoolSlavesParams(args, argsEscaped, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		defer recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	var response GetBlockchainPoolSlavesRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:          ctx,
			OperationName:    "GetBlockchainPoolSlaves",
			OperationSummary: "Get pool locations on blockchain",
			OperationID:      "getBlockchainPoolSlaves",
			Body:             nil,
			Params: middleware.Parameters{
				{
					Name: "blockchain",
					In:   "path",
				}: params.Blockchain,
				{
					Name: "solo",
					In:   "query",
				}: params.Solo,
			},
			Raw: r,
		}

		type (
			Request  = struct{}
			Params   = GetBlockchainPoolSlavesParams
			Response = GetBlockchainPoolSlavesRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackGetBlockchainPoolSlavesParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.GetBlockchainPoolSlaves(ctx, params)
				return response, err
			},
		)
	} else {
		response, err = s.h.GetBlockchainPoolSlaves(ctx, params)
	}
	if err != nil {
		defer recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeGetBlockchainPoolSlavesResponse(response, w); err != nil {
		defer recordError("EncodeResponse", err)
		if !errors.Is(err, ht.ErrInternalServerErrorResponse) {
			s.cfg.ErrorHandler(ctx, w, r, err)
		}
		return
	}
}

// handleGetBlockchainPoolStatsRequest handles getBlockchainPoolStats operation.
//
// Get pool statistics on blockchain.
//
// GET /pools/{blockchain}/stats
func (s *Server) handleGetBlockchainPoolStatsRequest(args [1]string, argsEscaped bool, w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var (
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: "GetBlockchainPoolStats",
			ID:   "getBlockchainPoolStats",
		}
	)
	params, err := decodeGetBlockchainPoolStatsParams(args, argsEscaped, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		defer recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	var response GetBlockchainPoolStatsRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:          ctx,
			OperationName:    "GetBlockchainPoolStats",
			OperationSummary: "Get pool statistics on blockchain",
			OperationID:      "getBlockchainPoolStats",
			Body:             nil,
			Params: middleware.Parameters{
				{
					Name: "blockchain",
					In:   "path",
				}: params.Blockchain,
				{
					Name: "solo",
					In:   "query",
				}: params.Solo,
			},
			Raw: r,
		}

		type (
			Request  = struct{}
			Params   = GetBlockchainPoolStatsParams
			Response = GetBlockchainPoolStatsRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackGetBlockchainPoolStatsParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.GetBlockchainPoolStats(ctx, params)
				return response, err
			},
		)
	} else {
		response, err = s.h.GetBlockchainPoolStats(ctx, params)
	}
	if err != nil {
		defer recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeGetBlockchainPoolStatsResponse(response, w); err != nil {
		defer recordError("EncodeResponse", err)
		if !errors.Is(err, ht.ErrInternalServerErrorResponse) {
			s.cfg.ErrorHandler(ctx, w, r, err)
		}
		return
	}
}

// handleGetBlockchainPoolStatsChartRequest handles getBlockchainPoolStatsChart operation.
//
// Get pool stats chart points.
//
// GET /charts/{blockchain}/pool_stats
func (s *Server) handleGetBlockchainPoolStatsChartRequest(args [1]string, argsEscaped bool, w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var (
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: "GetBlockchainPoolStatsChart",
			ID:   "getBlockchainPoolStatsChart",
		}
	)
	params, err := decodeGetBlockchainPoolStatsChartParams(args, argsEscaped, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		defer recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	var response GetBlockchainPoolStatsChartRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:          ctx,
			OperationName:    "GetBlockchainPoolStatsChart",
			OperationSummary: "Get pool stats chart points",
			OperationID:      "getBlockchainPoolStatsChart",
			Body:             nil,
			Params: middleware.Parameters{
				{
					Name: "blockchain",
					In:   "path",
				}: params.Blockchain,
				{
					Name: "period",
					In:   "query",
				}: params.Period,
				{
					Name: "solo",
					In:   "query",
				}: params.Solo,
			},
			Raw: r,
		}

		type (
			Request  = struct{}
			Params   = GetBlockchainPoolStatsChartParams
			Response = GetBlockchainPoolStatsChartRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackGetBlockchainPoolStatsChartParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.GetBlockchainPoolStatsChart(ctx, params)
				return response, err
			},
		)
	} else {
		response, err = s.h.GetBlockchainPoolStatsChart(ctx, params)
	}
	if err != nil {
		defer recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeGetBlockchainPoolStatsChartResponse(response, w); err != nil {
		defer recordError("EncodeResponse", err)
		if !errors.Is(err, ht.ErrInternalServerErrorResponse) {
			s.cfg.ErrorHandler(ctx, w, r, err)
		}
		return
	}
}

// handleGetBlockchainRoundsChartRequest handles getBlockchainRoundsChart operation.
//
// Get rounds chart points.
//
// GET /charts/{blockchain}/rounds
func (s *Server) handleGetBlockchainRoundsChartRequest(args [1]string, argsEscaped bool, w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var (
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: "GetBlockchainRoundsChart",
			ID:   "getBlockchainRoundsChart",
		}
	)
	params, err := decodeGetBlockchainRoundsChartParams(args, argsEscaped, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		defer recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	var response GetBlockchainRoundsChartRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:          ctx,
			OperationName:    "GetBlockchainRoundsChart",
			OperationSummary: "Get rounds chart points",
			OperationID:      "getBlockchainRoundsChart",
			Body:             nil,
			Params: middleware.Parameters{
				{
					Name: "blockchain",
					In:   "path",
				}: params.Blockchain,
				{
					Name: "period",
					In:   "query",
				}: params.Period,
			},
			Raw: r,
		}

		type (
			Request  = struct{}
			Params   = GetBlockchainRoundsChartParams
			Response = GetBlockchainRoundsChartRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackGetBlockchainRoundsChartParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.GetBlockchainRoundsChart(ctx, params)
				return response, err
			},
		)
	} else {
		response, err = s.h.GetBlockchainRoundsChart(ctx, params)
	}
	if err != nil {
		defer recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeGetBlockchainRoundsChartResponse(response, w); err != nil {
		defer recordError("EncodeResponse", err)
		if !errors.Is(err, ht.ErrInternalServerErrorResponse) {
			s.cfg.ErrorHandler(ctx, w, r, err)
		}
		return
	}
}

// handleGetBlockchainSoloBlocksRequest handles getBlockchainSoloBlocks operation.
//
// Get solo blocks list on blockchain.
//
// GET /blocks/{blockchain}/solo
func (s *Server) handleGetBlockchainSoloBlocksRequest(args [1]string, argsEscaped bool, w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var (
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: "GetBlockchainSoloBlocks",
			ID:   "getBlockchainSoloBlocks",
		}
	)
	params, err := decodeGetBlockchainSoloBlocksParams(args, argsEscaped, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		defer recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	var response GetBlockchainSoloBlocksRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:          ctx,
			OperationName:    "GetBlockchainSoloBlocks",
			OperationSummary: "Get solo blocks list on blockchain",
			OperationID:      "getBlockchainSoloBlocks",
			Body:             nil,
			Params: middleware.Parameters{
				{
					Name: "blockchain",
					In:   "path",
				}: params.Blockchain,
				{
					Name: "limit",
					In:   "query",
				}: params.Limit,
				{
					Name: "offset",
					In:   "query",
				}: params.Offset,
				{
					Name: "sorts",
					In:   "query",
				}: params.Sorts,
				{
					Name: "miner",
					In:   "query",
				}: params.Miner,
				{
					Name: "miner_hashrate",
					In:   "query",
				}: params.MinerHashrate,
				{
					Name: "block_hash",
					In:   "query",
				}: params.BlockHash,
				{
					Name: "reward",
					In:   "query",
				}: params.Reward,
				{
					Name: "tx_hash",
					In:   "query",
				}: params.TxHash,
				{
					Name: "share_difficulty",
					In:   "query",
				}: params.ShareDifficulty,
				{
					Name: "mined_at",
					In:   "query",
				}: params.MinedAt,
			},
			Raw: r,
		}

		type (
			Request  = struct{}
			Params   = GetBlockchainSoloBlocksParams
			Response = GetBlockchainSoloBlocksRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackGetBlockchainSoloBlocksParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.GetBlockchainSoloBlocks(ctx, params)
				return response, err
			},
		)
	} else {
		response, err = s.h.GetBlockchainSoloBlocks(ctx, params)
	}
	if err != nil {
		defer recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeGetBlockchainSoloBlocksResponse(response, w); err != nil {
		defer recordError("EncodeResponse", err)
		if !errors.Is(err, ht.ErrInternalServerErrorResponse) {
			s.cfg.ErrorHandler(ctx, w, r, err)
		}
		return
	}
}

// handleGetBlockchainsRequest handles getBlockchains operation.
//
// Get available blockchains list.
//
// GET /blockchains
func (s *Server) handleGetBlockchainsRequest(args [0]string, argsEscaped bool, w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var (
		err error
	)

	var response *BlockchainsList
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:          ctx,
			OperationName:    "GetBlockchains",
			OperationSummary: "Get available blockchains list",
			OperationID:      "getBlockchains",
			Body:             nil,
			Params:           middleware.Parameters{},
			Raw:              r,
		}

		type (
			Request  = struct{}
			Params   = struct{}
			Response = *BlockchainsList
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			nil,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.GetBlockchains(ctx)
				return response, err
			},
		)
	} else {
		response, err = s.h.GetBlockchains(ctx)
	}
	if err != nil {
		defer recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeGetBlockchainsResponse(response, w); err != nil {
		defer recordError("EncodeResponse", err)
		if !errors.Is(err, ht.ErrInternalServerErrorResponse) {
			s.cfg.ErrorHandler(ctx, w, r, err)
		}
		return
	}
}

// handleGetPoolsRequest handles getPools operation.
//
// Get pool info and statistics for all blockchains.
//
// GET /pools
func (s *Server) handleGetPoolsRequest(args [0]string, argsEscaped bool, w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var (
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: "GetPools",
			ID:   "getPools",
		}
	)
	params, err := decodeGetPoolsParams(args, argsEscaped, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		defer recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	var response GetPoolsRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:          ctx,
			OperationName:    "GetPools",
			OperationSummary: "Get pool info and statistics for all blockchains",
			OperationID:      "getPools",
			Body:             nil,
			Params: middleware.Parameters{
				{
					Name: "include_solo_stats",
					In:   "query",
				}: params.IncludeSoloStats,
				{
					Name: "include_network_info",
					In:   "query",
				}: params.IncludeNetworkInfo,
			},
			Raw: r,
		}

		type (
			Request  = struct{}
			Params   = GetPoolsParams
			Response = GetPoolsRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackGetPoolsParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.GetPools(ctx, params)
				return response, err
			},
		)
	} else {
		response, err = s.h.GetPools(ctx, params)
	}
	if err != nil {
		defer recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeGetPoolsResponse(response, w); err != nil {
		defer recordError("EncodeResponse", err)
		if !errors.Is(err, ht.ErrInternalServerErrorResponse) {
			s.cfg.ErrorHandler(ctx, w, r, err)
		}
		return
	}
}

// handleGetPricesRequest handles getPrices operation.
//
// Get blockchains prices list.
//
// GET /prices
func (s *Server) handleGetPricesRequest(args [0]string, argsEscaped bool, w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var (
		err error
	)

	var response GetPricesRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:          ctx,
			OperationName:    "GetPrices",
			OperationSummary: "Get blockchains prices list",
			OperationID:      "getPrices",
			Body:             nil,
			Params:           middleware.Parameters{},
			Raw:              r,
		}

		type (
			Request  = struct{}
			Params   = struct{}
			Response = GetPricesRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			nil,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.GetPrices(ctx)
				return response, err
			},
		)
	} else {
		response, err = s.h.GetPrices(ctx)
	}
	if err != nil {
		defer recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeGetPricesResponse(response, w); err != nil {
		defer recordError("EncodeResponse", err)
		if !errors.Is(err, ht.ErrInternalServerErrorResponse) {
			s.cfg.ErrorHandler(ctx, w, r, err)
		}
		return
	}
}
