// Code generated by ogen, DO NOT EDIT.

package apiModels

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// GetBlockchainBlocks implements getBlockchainBlocks operation.
	//
	// Get blocks list on blockchain.
	//
	// GET /blocks/{blockchain}
	GetBlockchainBlocks(ctx context.Context, params GetBlockchainBlocksParams) (GetBlockchainBlocksRes, error)
	// GetBlockchainCoinPrice implements getBlockchainCoinPrice operation.
	//
	// Get blockchain coin price and markets.
	//
	// GET /prices/{blockchain}
	GetBlockchainCoinPrice(ctx context.Context, params GetBlockchainCoinPriceParams) (GetBlockchainCoinPriceRes, error)
	// GetBlockchainMiner implements getBlockchainMiner operation.
	//
	// Get miner info on blockchain.
	//
	// GET /miners/{blockchain}/miner/{miner}
	GetBlockchainMiner(ctx context.Context, params GetBlockchainMinerParams) (GetBlockchainMinerRes, error)
	// GetBlockchainMinerBalance implements getBlockchainMinerBalance operation.
	//
	// Get miner balance on blockchain.
	//
	// GET /payouts/{blockchain}/balance/{miner}
	GetBlockchainMinerBalance(ctx context.Context, params GetBlockchainMinerBalanceParams) (GetBlockchainMinerBalanceRes, error)
	// GetBlockchainMinerHashratesChart implements getBlockchainMinerHashratesChart operation.
	//
	// Get miner hashrates chart points.
	//
	// GET /charts/{blockchain}/miner/{miner}/hashrates
	GetBlockchainMinerHashratesChart(ctx context.Context, params GetBlockchainMinerHashratesChartParams) (GetBlockchainMinerHashratesChartRes, error)
	// GetBlockchainMinerSharesChart implements getBlockchainMinerSharesChart operation.
	//
	// Get miner shares chart points.
	//
	// GET /charts/{blockchain}/miner/{miner}/shares
	GetBlockchainMinerSharesChart(ctx context.Context, params GetBlockchainMinerSharesChartParams) (GetBlockchainMinerSharesChartRes, error)
	// GetBlockchainMinerWorkerHashratesChart implements getBlockchainMinerWorkerHashratesChart operation.
	//
	// Get miner worker hashrates chart points.
	//
	// GET /charts/{blockchain}/miner/{miner}/worker/{worker}/hashrates
	GetBlockchainMinerWorkerHashratesChart(ctx context.Context, params GetBlockchainMinerWorkerHashratesChartParams) (GetBlockchainMinerWorkerHashratesChartRes, error)
	// GetBlockchainMinerWorkerSharesChart implements getBlockchainMinerWorkerSharesChart operation.
	//
	// Get miner worker shares chart points.
	//
	// GET /charts/{blockchain}/miner/{miner}/worker/{worker}/shares
	GetBlockchainMinerWorkerSharesChart(ctx context.Context, params GetBlockchainMinerWorkerSharesChartParams) (GetBlockchainMinerWorkerSharesChartRes, error)
	// GetBlockchainMinerWorkers implements getBlockchainMinerWorkers operation.
	//
	// Get miner workers list on blockchain.
	//
	// GET /miners/{blockchain}/workers/{miner}
	GetBlockchainMinerWorkers(ctx context.Context, params GetBlockchainMinerWorkersParams) (GetBlockchainMinerWorkersRes, error)
	// GetBlockchainMiners implements getBlockchainMiners operation.
	//
	// Get miners list on blockchain.
	//
	// GET /miners/{blockchain}
	GetBlockchainMiners(ctx context.Context, params GetBlockchainMinersParams) (GetBlockchainMinersRes, error)
	// GetBlockchainPayouts implements getBlockchainPayouts operation.
	//
	// Get payouts list on blockchain.
	//
	// GET /payouts/{blockchain}
	GetBlockchainPayouts(ctx context.Context, params GetBlockchainPayoutsParams) (GetBlockchainPayoutsRes, error)
	// GetBlockchainPool implements getBlockchainPool operation.
	//
	// Get full pool data on blockchain.
	//
	// GET /pools/{blockchain}
	GetBlockchainPool(ctx context.Context, params GetBlockchainPoolParams) (GetBlockchainPoolRes, error)
	// GetBlockchainPoolDifficultiesChart implements getBlockchainPoolDifficultiesChart operation.
	//
	// Get pool difficulties chart points.
	//
	// GET /charts/{blockchain}/pool_difficulties
	GetBlockchainPoolDifficultiesChart(ctx context.Context, params GetBlockchainPoolDifficultiesChartParams) (GetBlockchainPoolDifficultiesChartRes, error)
	// GetBlockchainPoolInfo implements getBlockchainPoolInfo operation.
	//
	// Get pool info on blockchain.
	//
	// GET /pools/{blockchain}/info
	GetBlockchainPoolInfo(ctx context.Context, params GetBlockchainPoolInfoParams) (GetBlockchainPoolInfoRes, error)
	// GetBlockchainPoolSlaves implements getBlockchainPoolSlaves operation.
	//
	// Get pool locations on blockchain.
	//
	// GET /pools/{blockchain}/slaves
	GetBlockchainPoolSlaves(ctx context.Context, params GetBlockchainPoolSlavesParams) (GetBlockchainPoolSlavesRes, error)
	// GetBlockchainPoolStats implements getBlockchainPoolStats operation.
	//
	// Get pool statistics on blockchain.
	//
	// GET /pools/{blockchain}/stats
	GetBlockchainPoolStats(ctx context.Context, params GetBlockchainPoolStatsParams) (GetBlockchainPoolStatsRes, error)
	// GetBlockchainPoolStatsChart implements getBlockchainPoolStatsChart operation.
	//
	// Get pool stats chart points.
	//
	// GET /charts/{blockchain}/pool_stats
	GetBlockchainPoolStatsChart(ctx context.Context, params GetBlockchainPoolStatsChartParams) (GetBlockchainPoolStatsChartRes, error)
	// GetBlockchainRoundsChart implements getBlockchainRoundsChart operation.
	//
	// Get rounds chart points.
	//
	// GET /charts/{blockchain}/rounds
	GetBlockchainRoundsChart(ctx context.Context, params GetBlockchainRoundsChartParams) (GetBlockchainRoundsChartRes, error)
	// GetBlockchainSoloBlocks implements getBlockchainSoloBlocks operation.
	//
	// Get solo blocks list on blockchain.
	//
	// GET /blocks/{blockchain}/solo
	GetBlockchainSoloBlocks(ctx context.Context, params GetBlockchainSoloBlocksParams) (GetBlockchainSoloBlocksRes, error)
	// GetBlockchains implements getBlockchains operation.
	//
	// Get available blockchains list.
	//
	// GET /blockchains
	GetBlockchains(ctx context.Context) (*BlockchainsList, error)
	// GetPrices implements getPrices operation.
	//
	// Get pool blockchain coin price list.
	//
	// GET /prices
	GetPrices(ctx context.Context) (GetPricesRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
