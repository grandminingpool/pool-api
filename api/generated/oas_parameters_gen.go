// Code generated by ogen, DO NOT EDIT.

package apiModels

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// GetBlockchainBlocksParams is parameters of getBlockchainBlocks operation.
type GetBlockchainBlocksParams struct {
	// Pool blockchain.
	Blockchain string
	// List rows limit.
	Limit uint32
	// List rows offset.
	Offset uint32
	// Blocks list sorts.
	Sorts OptString
	// Mined block miner address filter.
	Miner OptString
	// Mined block miner hashrate filter.
	MinerHashrate OptString
	// Mined block hash filter.
	BlockHash OptString
	// Round miners count filter.
	RoundMinersCount OptString
	// Mined block time filter.
	MinedAt OptString
}

func unpackGetBlockchainBlocksParams(packed middleware.Parameters) (params GetBlockchainBlocksParams) {
	{
		key := middleware.ParameterKey{
			Name: "blockchain",
			In:   "path",
		}
		params.Blockchain = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		params.Limit = packed[key].(uint32)
	}
	{
		key := middleware.ParameterKey{
			Name: "offset",
			In:   "query",
		}
		params.Offset = packed[key].(uint32)
	}
	{
		key := middleware.ParameterKey{
			Name: "sorts",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Sorts = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "miner",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Miner = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "miner_hashrate",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.MinerHashrate = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "block_hash",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.BlockHash = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "round_miners_count",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.RoundMinersCount = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "mined_at",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.MinedAt = v.(OptString)
		}
	}
	return params
}

func decodeGetBlockchainBlocksParams(args [1]string, argsEscaped bool, r *http.Request) (params GetBlockchainBlocksParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: blockchain.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "blockchain",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Blockchain = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "blockchain",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for query: limit.
	{
		val := uint32(10)
		params.Limit = val
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint32(val)
				if err != nil {
					return err
				}

				params.Limit = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: offset.
	{
		val := uint32(0)
		params.Offset = val
	}
	// Decode query: offset.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "offset",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint32(val)
				if err != nil {
					return err
				}

				params.Offset = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "offset",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: sorts.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sorts",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSortsVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSortsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Sorts.SetTo(paramsDotSortsVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "sorts",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: miner.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "miner",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotMinerVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotMinerVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Miner.SetTo(paramsDotMinerVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "miner",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: miner_hashrate.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "miner_hashrate",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotMinerHashrateVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotMinerHashrateVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.MinerHashrate.SetTo(paramsDotMinerHashrateVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "miner_hashrate",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: block_hash.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "block_hash",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotBlockHashVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotBlockHashVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.BlockHash.SetTo(paramsDotBlockHashVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "block_hash",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: round_miners_count.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "round_miners_count",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotRoundMinersCountVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotRoundMinersCountVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.RoundMinersCount.SetTo(paramsDotRoundMinersCountVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "round_miners_count",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: mined_at.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "mined_at",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotMinedAtVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotMinedAtVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.MinedAt.SetTo(paramsDotMinedAtVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "mined_at",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetBlockchainMarketsParams is parameters of getBlockchainMarkets operation.
type GetBlockchainMarketsParams struct {
	// Pool blockchain.
	Blockchain string
}

func unpackGetBlockchainMarketsParams(packed middleware.Parameters) (params GetBlockchainMarketsParams) {
	{
		key := middleware.ParameterKey{
			Name: "blockchain",
			In:   "path",
		}
		params.Blockchain = packed[key].(string)
	}
	return params
}

func decodeGetBlockchainMarketsParams(args [1]string, argsEscaped bool, r *http.Request) (params GetBlockchainMarketsParams, _ error) {
	// Decode path: blockchain.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "blockchain",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Blockchain = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "blockchain",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetBlockchainMinerParams is parameters of getBlockchainMiner operation.
type GetBlockchainMinerParams struct {
	// Pool blockchain.
	Blockchain string
	// Pool miner.
	Miner string
}

func unpackGetBlockchainMinerParams(packed middleware.Parameters) (params GetBlockchainMinerParams) {
	{
		key := middleware.ParameterKey{
			Name: "blockchain",
			In:   "path",
		}
		params.Blockchain = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "miner",
			In:   "path",
		}
		params.Miner = packed[key].(string)
	}
	return params
}

func decodeGetBlockchainMinerParams(args [2]string, argsEscaped bool, r *http.Request) (params GetBlockchainMinerParams, _ error) {
	// Decode path: blockchain.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "blockchain",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Blockchain = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "blockchain",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: miner.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "miner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Miner = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "miner",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetBlockchainMinerBalanceParams is parameters of getBlockchainMinerBalance operation.
type GetBlockchainMinerBalanceParams struct {
	// Pool blockchain.
	Blockchain string
	// Pool miner.
	Miner string
}

func unpackGetBlockchainMinerBalanceParams(packed middleware.Parameters) (params GetBlockchainMinerBalanceParams) {
	{
		key := middleware.ParameterKey{
			Name: "blockchain",
			In:   "path",
		}
		params.Blockchain = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "miner",
			In:   "path",
		}
		params.Miner = packed[key].(string)
	}
	return params
}

func decodeGetBlockchainMinerBalanceParams(args [2]string, argsEscaped bool, r *http.Request) (params GetBlockchainMinerBalanceParams, _ error) {
	// Decode path: blockchain.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "blockchain",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Blockchain = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "blockchain",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: miner.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "miner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Miner = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "miner",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetBlockchainMinerHashratesChartParams is parameters of getBlockchainMinerHashratesChart operation.
type GetBlockchainMinerHashratesChartParams struct {
	// Pool blockchain.
	Blockchain string
	// Pool miner.
	Miner string
	// Chart period.
	Period ChartPeriod
	// Show miner solo hashrates points (if pool supports solo mining)?.
	Solo OptBool
}

func unpackGetBlockchainMinerHashratesChartParams(packed middleware.Parameters) (params GetBlockchainMinerHashratesChartParams) {
	{
		key := middleware.ParameterKey{
			Name: "blockchain",
			In:   "path",
		}
		params.Blockchain = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "miner",
			In:   "path",
		}
		params.Miner = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "period",
			In:   "query",
		}
		params.Period = packed[key].(ChartPeriod)
	}
	{
		key := middleware.ParameterKey{
			Name: "solo",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Solo = v.(OptBool)
		}
	}
	return params
}

func decodeGetBlockchainMinerHashratesChartParams(args [2]string, argsEscaped bool, r *http.Request) (params GetBlockchainMinerHashratesChartParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: blockchain.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "blockchain",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Blockchain = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "blockchain",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: miner.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "miner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Miner = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "miner",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: period.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "period",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Period = ChartPeriod(c)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Period.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "period",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: solo.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "solo",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSoloVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotSoloVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Solo.SetTo(paramsDotSoloVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "solo",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetBlockchainMinerProfitabilitiesChartParams is parameters of getBlockchainMinerProfitabilitiesChart operation.
type GetBlockchainMinerProfitabilitiesChartParams struct {
	// Pool blockchain.
	Blockchain string
	// Pool miner.
	Miner string
	// Chart period.
	Period ChartPeriod
	// Show miner solo profitabilities points (if pool supports solo mining)?.
	Solo OptBool
}

func unpackGetBlockchainMinerProfitabilitiesChartParams(packed middleware.Parameters) (params GetBlockchainMinerProfitabilitiesChartParams) {
	{
		key := middleware.ParameterKey{
			Name: "blockchain",
			In:   "path",
		}
		params.Blockchain = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "miner",
			In:   "path",
		}
		params.Miner = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "period",
			In:   "query",
		}
		params.Period = packed[key].(ChartPeriod)
	}
	{
		key := middleware.ParameterKey{
			Name: "solo",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Solo = v.(OptBool)
		}
	}
	return params
}

func decodeGetBlockchainMinerProfitabilitiesChartParams(args [2]string, argsEscaped bool, r *http.Request) (params GetBlockchainMinerProfitabilitiesChartParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: blockchain.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "blockchain",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Blockchain = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "blockchain",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: miner.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "miner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Miner = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "miner",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: period.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "period",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Period = ChartPeriod(c)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Period.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "period",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: solo.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "solo",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSoloVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotSoloVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Solo.SetTo(paramsDotSoloVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "solo",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetBlockchainMinerSharesChartParams is parameters of getBlockchainMinerSharesChart operation.
type GetBlockchainMinerSharesChartParams struct {
	// Pool blockchain.
	Blockchain string
	// Pool miner.
	Miner string
	// Chart period.
	Period ChartPeriod
	// Show miner solo shares points (if pool supports solo mining)?.
	Solo OptBool
}

func unpackGetBlockchainMinerSharesChartParams(packed middleware.Parameters) (params GetBlockchainMinerSharesChartParams) {
	{
		key := middleware.ParameterKey{
			Name: "blockchain",
			In:   "path",
		}
		params.Blockchain = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "miner",
			In:   "path",
		}
		params.Miner = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "period",
			In:   "query",
		}
		params.Period = packed[key].(ChartPeriod)
	}
	{
		key := middleware.ParameterKey{
			Name: "solo",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Solo = v.(OptBool)
		}
	}
	return params
}

func decodeGetBlockchainMinerSharesChartParams(args [2]string, argsEscaped bool, r *http.Request) (params GetBlockchainMinerSharesChartParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: blockchain.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "blockchain",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Blockchain = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "blockchain",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: miner.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "miner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Miner = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "miner",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: period.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "period",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Period = ChartPeriod(c)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Period.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "period",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: solo.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "solo",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSoloVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotSoloVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Solo.SetTo(paramsDotSoloVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "solo",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetBlockchainMinerWorkerHashratesChartParams is parameters of getBlockchainMinerWorkerHashratesChart operation.
type GetBlockchainMinerWorkerHashratesChartParams struct {
	// Pool blockchain.
	Blockchain string
	// Pool miner.
	Miner string
	// Pool worker.
	Worker string
	// Chart period.
	Period ChartPeriod
}

func unpackGetBlockchainMinerWorkerHashratesChartParams(packed middleware.Parameters) (params GetBlockchainMinerWorkerHashratesChartParams) {
	{
		key := middleware.ParameterKey{
			Name: "blockchain",
			In:   "path",
		}
		params.Blockchain = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "miner",
			In:   "path",
		}
		params.Miner = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "worker",
			In:   "path",
		}
		params.Worker = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "period",
			In:   "query",
		}
		params.Period = packed[key].(ChartPeriod)
	}
	return params
}

func decodeGetBlockchainMinerWorkerHashratesChartParams(args [3]string, argsEscaped bool, r *http.Request) (params GetBlockchainMinerWorkerHashratesChartParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: blockchain.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "blockchain",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Blockchain = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "blockchain",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: miner.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "miner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Miner = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "miner",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: worker.
	if err := func() error {
		param := args[2]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[2])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "worker",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Worker = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "worker",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: period.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "period",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Period = ChartPeriod(c)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Period.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "period",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetBlockchainMinerWorkerSharesChartParams is parameters of getBlockchainMinerWorkerSharesChart operation.
type GetBlockchainMinerWorkerSharesChartParams struct {
	// Pool blockchain.
	Blockchain string
	// Pool miner.
	Miner string
	// Pool worker.
	Worker string
	// Chart period.
	Period ChartPeriod
}

func unpackGetBlockchainMinerWorkerSharesChartParams(packed middleware.Parameters) (params GetBlockchainMinerWorkerSharesChartParams) {
	{
		key := middleware.ParameterKey{
			Name: "blockchain",
			In:   "path",
		}
		params.Blockchain = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "miner",
			In:   "path",
		}
		params.Miner = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "worker",
			In:   "path",
		}
		params.Worker = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "period",
			In:   "query",
		}
		params.Period = packed[key].(ChartPeriod)
	}
	return params
}

func decodeGetBlockchainMinerWorkerSharesChartParams(args [3]string, argsEscaped bool, r *http.Request) (params GetBlockchainMinerWorkerSharesChartParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: blockchain.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "blockchain",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Blockchain = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "blockchain",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: miner.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "miner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Miner = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "miner",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: worker.
	if err := func() error {
		param := args[2]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[2])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "worker",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Worker = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "worker",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: period.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "period",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Period = ChartPeriod(c)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Period.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "period",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetBlockchainMinerWorkersParams is parameters of getBlockchainMinerWorkers operation.
type GetBlockchainMinerWorkersParams struct {
	// Pool blockchain.
	Blockchain string
	// Pool miner.
	Miner string
}

func unpackGetBlockchainMinerWorkersParams(packed middleware.Parameters) (params GetBlockchainMinerWorkersParams) {
	{
		key := middleware.ParameterKey{
			Name: "blockchain",
			In:   "path",
		}
		params.Blockchain = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "miner",
			In:   "path",
		}
		params.Miner = packed[key].(string)
	}
	return params
}

func decodeGetBlockchainMinerWorkersParams(args [2]string, argsEscaped bool, r *http.Request) (params GetBlockchainMinerWorkersParams, _ error) {
	// Decode path: blockchain.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "blockchain",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Blockchain = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "blockchain",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: miner.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "miner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Miner = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "miner",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetBlockchainMinersParams is parameters of getBlockchainMiners operation.
type GetBlockchainMinersParams struct {
	// Pool blockchain.
	Blockchain string
	// List rows limit.
	Limit uint32
	// List rows offset.
	Offset uint32
	// Miners list sorts.
	Sorts OptString
	// Miner address filter.
	Address OptString
	// Miner hashrate filter.
	Hashrate OptString
	// Miner workers count filter.
	WorkersCount OptString
	// Miner mined blocks count filter.
	BlocksCount OptString
	// Miner mined solo blocks count filter.
	SoloBlocksCount OptString
	// Miner joined at time filter.
	JoinedAt OptString
}

func unpackGetBlockchainMinersParams(packed middleware.Parameters) (params GetBlockchainMinersParams) {
	{
		key := middleware.ParameterKey{
			Name: "blockchain",
			In:   "path",
		}
		params.Blockchain = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		params.Limit = packed[key].(uint32)
	}
	{
		key := middleware.ParameterKey{
			Name: "offset",
			In:   "query",
		}
		params.Offset = packed[key].(uint32)
	}
	{
		key := middleware.ParameterKey{
			Name: "sorts",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Sorts = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "address",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Address = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "hashrate",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Hashrate = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "workers_count",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.WorkersCount = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "blocks_count",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.BlocksCount = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "solo_blocks_count",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.SoloBlocksCount = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "joined_at",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.JoinedAt = v.(OptString)
		}
	}
	return params
}

func decodeGetBlockchainMinersParams(args [1]string, argsEscaped bool, r *http.Request) (params GetBlockchainMinersParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: blockchain.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "blockchain",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Blockchain = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "blockchain",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for query: limit.
	{
		val := uint32(10)
		params.Limit = val
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint32(val)
				if err != nil {
					return err
				}

				params.Limit = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: offset.
	{
		val := uint32(0)
		params.Offset = val
	}
	// Decode query: offset.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "offset",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint32(val)
				if err != nil {
					return err
				}

				params.Offset = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "offset",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: sorts.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sorts",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSortsVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSortsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Sorts.SetTo(paramsDotSortsVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "sorts",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: address.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "address",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAddressVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotAddressVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Address.SetTo(paramsDotAddressVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "address",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: hashrate.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "hashrate",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotHashrateVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotHashrateVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Hashrate.SetTo(paramsDotHashrateVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "hashrate",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: workers_count.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "workers_count",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWorkersCountVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotWorkersCountVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.WorkersCount.SetTo(paramsDotWorkersCountVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "workers_count",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: blocks_count.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "blocks_count",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotBlocksCountVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotBlocksCountVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.BlocksCount.SetTo(paramsDotBlocksCountVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "blocks_count",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: solo_blocks_count.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "solo_blocks_count",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSoloBlocksCountVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSoloBlocksCountVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.SoloBlocksCount.SetTo(paramsDotSoloBlocksCountVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "solo_blocks_count",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: joined_at.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "joined_at",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotJoinedAtVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotJoinedAtVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.JoinedAt.SetTo(paramsDotJoinedAtVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "joined_at",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetBlockchainPayoutsParams is parameters of getBlockchainPayouts operation.
type GetBlockchainPayoutsParams struct {
	// Pool blockchain.
	Blockchain string
	// List rows limit.
	Limit uint32
	// List rows offset.
	Offset uint32
	// Payouts list sorts.
	Sorts OptString
	// Payout miner address filter.
	Miner OptString
	// Payout transaction hash filter.
	TxHash OptString
	// Payout amount filter.
	Amount OptString
	// Payout time filter.
	PaidAt OptString
}

func unpackGetBlockchainPayoutsParams(packed middleware.Parameters) (params GetBlockchainPayoutsParams) {
	{
		key := middleware.ParameterKey{
			Name: "blockchain",
			In:   "path",
		}
		params.Blockchain = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		params.Limit = packed[key].(uint32)
	}
	{
		key := middleware.ParameterKey{
			Name: "offset",
			In:   "query",
		}
		params.Offset = packed[key].(uint32)
	}
	{
		key := middleware.ParameterKey{
			Name: "sorts",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Sorts = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "miner",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Miner = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "tx_hash",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.TxHash = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "amount",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Amount = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "paid_at",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PaidAt = v.(OptString)
		}
	}
	return params
}

func decodeGetBlockchainPayoutsParams(args [1]string, argsEscaped bool, r *http.Request) (params GetBlockchainPayoutsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: blockchain.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "blockchain",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Blockchain = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "blockchain",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for query: limit.
	{
		val := uint32(10)
		params.Limit = val
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint32(val)
				if err != nil {
					return err
				}

				params.Limit = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: offset.
	{
		val := uint32(0)
		params.Offset = val
	}
	// Decode query: offset.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "offset",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint32(val)
				if err != nil {
					return err
				}

				params.Offset = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "offset",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: sorts.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sorts",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSortsVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSortsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Sorts.SetTo(paramsDotSortsVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "sorts",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: miner.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "miner",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotMinerVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotMinerVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Miner.SetTo(paramsDotMinerVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "miner",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: tx_hash.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "tx_hash",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTxHashVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotTxHashVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TxHash.SetTo(paramsDotTxHashVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "tx_hash",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: amount.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "amount",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAmountVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotAmountVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Amount.SetTo(paramsDotAmountVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "amount",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: paid_at.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "paid_at",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPaidAtVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPaidAtVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PaidAt.SetTo(paramsDotPaidAtVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "paid_at",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetBlockchainPoolParams is parameters of getBlockchainPool operation.
type GetBlockchainPoolParams struct {
	// Pool blockchain.
	Blockchain string
	// Show data for solo pool (if pool supports solo mining)?.
	Solo OptBool
}

func unpackGetBlockchainPoolParams(packed middleware.Parameters) (params GetBlockchainPoolParams) {
	{
		key := middleware.ParameterKey{
			Name: "blockchain",
			In:   "path",
		}
		params.Blockchain = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "solo",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Solo = v.(OptBool)
		}
	}
	return params
}

func decodeGetBlockchainPoolParams(args [1]string, argsEscaped bool, r *http.Request) (params GetBlockchainPoolParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: blockchain.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "blockchain",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Blockchain = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "blockchain",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: solo.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "solo",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSoloVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotSoloVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Solo.SetTo(paramsDotSoloVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "solo",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetBlockchainPoolInfoParams is parameters of getBlockchainPoolInfo operation.
type GetBlockchainPoolInfoParams struct {
	// Pool blockchain.
	Blockchain string
}

func unpackGetBlockchainPoolInfoParams(packed middleware.Parameters) (params GetBlockchainPoolInfoParams) {
	{
		key := middleware.ParameterKey{
			Name: "blockchain",
			In:   "path",
		}
		params.Blockchain = packed[key].(string)
	}
	return params
}

func decodeGetBlockchainPoolInfoParams(args [1]string, argsEscaped bool, r *http.Request) (params GetBlockchainPoolInfoParams, _ error) {
	// Decode path: blockchain.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "blockchain",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Blockchain = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "blockchain",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetBlockchainPoolNetworkInfoParams is parameters of getBlockchainPoolNetworkInfo operation.
type GetBlockchainPoolNetworkInfoParams struct {
	// Pool blockchain.
	Blockchain string
}

func unpackGetBlockchainPoolNetworkInfoParams(packed middleware.Parameters) (params GetBlockchainPoolNetworkInfoParams) {
	{
		key := middleware.ParameterKey{
			Name: "blockchain",
			In:   "path",
		}
		params.Blockchain = packed[key].(string)
	}
	return params
}

func decodeGetBlockchainPoolNetworkInfoParams(args [1]string, argsEscaped bool, r *http.Request) (params GetBlockchainPoolNetworkInfoParams, _ error) {
	// Decode path: blockchain.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "blockchain",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Blockchain = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "blockchain",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetBlockchainPoolSlavesParams is parameters of getBlockchainPoolSlaves operation.
type GetBlockchainPoolSlavesParams struct {
	// Pool blockchain.
	Blockchain string
	// Show slaves for solo pool (if pool supports solo mining)?.
	Solo OptBool
}

func unpackGetBlockchainPoolSlavesParams(packed middleware.Parameters) (params GetBlockchainPoolSlavesParams) {
	{
		key := middleware.ParameterKey{
			Name: "blockchain",
			In:   "path",
		}
		params.Blockchain = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "solo",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Solo = v.(OptBool)
		}
	}
	return params
}

func decodeGetBlockchainPoolSlavesParams(args [1]string, argsEscaped bool, r *http.Request) (params GetBlockchainPoolSlavesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: blockchain.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "blockchain",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Blockchain = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "blockchain",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: solo.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "solo",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSoloVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotSoloVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Solo.SetTo(paramsDotSoloVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "solo",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetBlockchainPoolStatsParams is parameters of getBlockchainPoolStats operation.
type GetBlockchainPoolStatsParams struct {
	// Pool blockchain.
	Blockchain string
	// Show statistics for solo pool (if pool supports solo mining)?.
	Solo OptBool
}

func unpackGetBlockchainPoolStatsParams(packed middleware.Parameters) (params GetBlockchainPoolStatsParams) {
	{
		key := middleware.ParameterKey{
			Name: "blockchain",
			In:   "path",
		}
		params.Blockchain = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "solo",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Solo = v.(OptBool)
		}
	}
	return params
}

func decodeGetBlockchainPoolStatsParams(args [1]string, argsEscaped bool, r *http.Request) (params GetBlockchainPoolStatsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: blockchain.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "blockchain",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Blockchain = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "blockchain",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: solo.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "solo",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSoloVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotSoloVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Solo.SetTo(paramsDotSoloVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "solo",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetBlockchainPoolStatsChartParams is parameters of getBlockchainPoolStatsChart operation.
type GetBlockchainPoolStatsChartParams struct {
	// Pool blockchain.
	Blockchain string
	// Chart period.
	Period ChartPeriod
	// Show pool solo stats points (if pool supports solo mining)?.
	Solo OptBool
}

func unpackGetBlockchainPoolStatsChartParams(packed middleware.Parameters) (params GetBlockchainPoolStatsChartParams) {
	{
		key := middleware.ParameterKey{
			Name: "blockchain",
			In:   "path",
		}
		params.Blockchain = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "period",
			In:   "query",
		}
		params.Period = packed[key].(ChartPeriod)
	}
	{
		key := middleware.ParameterKey{
			Name: "solo",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Solo = v.(OptBool)
		}
	}
	return params
}

func decodeGetBlockchainPoolStatsChartParams(args [1]string, argsEscaped bool, r *http.Request) (params GetBlockchainPoolStatsChartParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: blockchain.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "blockchain",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Blockchain = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "blockchain",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: period.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "period",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Period = ChartPeriod(c)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Period.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "period",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: solo.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "solo",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSoloVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotSoloVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Solo.SetTo(paramsDotSoloVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "solo",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetBlockchainRoundsChartParams is parameters of getBlockchainRoundsChart operation.
type GetBlockchainRoundsChartParams struct {
	// Pool blockchain.
	Blockchain string
	// Chart period.
	Period ChartPeriod
}

func unpackGetBlockchainRoundsChartParams(packed middleware.Parameters) (params GetBlockchainRoundsChartParams) {
	{
		key := middleware.ParameterKey{
			Name: "blockchain",
			In:   "path",
		}
		params.Blockchain = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "period",
			In:   "query",
		}
		params.Period = packed[key].(ChartPeriod)
	}
	return params
}

func decodeGetBlockchainRoundsChartParams(args [1]string, argsEscaped bool, r *http.Request) (params GetBlockchainRoundsChartParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: blockchain.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "blockchain",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Blockchain = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "blockchain",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: period.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "period",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Period = ChartPeriod(c)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Period.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "period",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetBlockchainSoloBlocksParams is parameters of getBlockchainSoloBlocks operation.
type GetBlockchainSoloBlocksParams struct {
	// Pool blockchain.
	Blockchain string
	// List rows limit.
	Limit uint32
	// List rows offset.
	Offset uint32
	// Solo blocks list sorts.
	Sorts OptString
	// Mined solo block miner address filter.
	Miner OptString
	// Mined solo block miner hashrate filter.
	MinerHashrate OptString
	// Mined solo block hash filter.
	BlockHash OptString
	// Mined solo block reward filter.
	Reward OptString
	// Mined solo block transaction hash filter.
	TxHash OptString
	// Mined solo block time filter.
	MinedAt OptString
}

func unpackGetBlockchainSoloBlocksParams(packed middleware.Parameters) (params GetBlockchainSoloBlocksParams) {
	{
		key := middleware.ParameterKey{
			Name: "blockchain",
			In:   "path",
		}
		params.Blockchain = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		params.Limit = packed[key].(uint32)
	}
	{
		key := middleware.ParameterKey{
			Name: "offset",
			In:   "query",
		}
		params.Offset = packed[key].(uint32)
	}
	{
		key := middleware.ParameterKey{
			Name: "sorts",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Sorts = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "miner",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Miner = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "miner_hashrate",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.MinerHashrate = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "block_hash",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.BlockHash = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "reward",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Reward = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "tx_hash",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.TxHash = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "mined_at",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.MinedAt = v.(OptString)
		}
	}
	return params
}

func decodeGetBlockchainSoloBlocksParams(args [1]string, argsEscaped bool, r *http.Request) (params GetBlockchainSoloBlocksParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: blockchain.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "blockchain",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Blockchain = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "blockchain",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for query: limit.
	{
		val := uint32(10)
		params.Limit = val
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint32(val)
				if err != nil {
					return err
				}

				params.Limit = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: offset.
	{
		val := uint32(0)
		params.Offset = val
	}
	// Decode query: offset.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "offset",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint32(val)
				if err != nil {
					return err
				}

				params.Offset = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "offset",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: sorts.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sorts",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSortsVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSortsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Sorts.SetTo(paramsDotSortsVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "sorts",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: miner.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "miner",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotMinerVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotMinerVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Miner.SetTo(paramsDotMinerVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "miner",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: miner_hashrate.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "miner_hashrate",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotMinerHashrateVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotMinerHashrateVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.MinerHashrate.SetTo(paramsDotMinerHashrateVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "miner_hashrate",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: block_hash.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "block_hash",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotBlockHashVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotBlockHashVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.BlockHash.SetTo(paramsDotBlockHashVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "block_hash",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: reward.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "reward",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotRewardVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotRewardVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Reward.SetTo(paramsDotRewardVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "reward",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: tx_hash.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "tx_hash",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTxHashVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotTxHashVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TxHash.SetTo(paramsDotTxHashVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "tx_hash",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: mined_at.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "mined_at",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotMinedAtVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotMinedAtVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.MinedAt.SetTo(paramsDotMinedAtVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "mined_at",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetPoolsParams is parameters of getPools operation.
type GetPoolsParams struct {
	// Include pool solo statistics (if pool supports solo mining) in response?.
	IncludeSoloStats OptBool
	// Include pool network info in response?.
	IncludeNetworkInfo OptBool
}

func unpackGetPoolsParams(packed middleware.Parameters) (params GetPoolsParams) {
	{
		key := middleware.ParameterKey{
			Name: "include_solo_stats",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.IncludeSoloStats = v.(OptBool)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "include_network_info",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.IncludeNetworkInfo = v.(OptBool)
		}
	}
	return params
}

func decodeGetPoolsParams(args [0]string, argsEscaped bool, r *http.Request) (params GetPoolsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: include_solo_stats.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "include_solo_stats",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotIncludeSoloStatsVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotIncludeSoloStatsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.IncludeSoloStats.SetTo(paramsDotIncludeSoloStatsVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "include_solo_stats",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: include_network_info.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "include_network_info",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotIncludeNetworkInfoVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotIncludeNetworkInfoVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.IncludeNetworkInfo.SetTo(paramsDotIncludeNetworkInfoVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "include_network_info",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}
