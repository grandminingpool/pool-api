// Code generated by ogen, DO NOT EDIT.

package apiModels

import (
	"github.com/go-faster/errors"
)

// Ref: #/components/schemas/Blockchain
type Blockchain struct {
	Coin       string `json:"coin"`
	Name       string `json:"name"`
	Ticker     string `json:"ticker"`
	AtomicUnit uint16 `json:"atomic_unit"`
}

// GetCoin returns the value of Coin.
func (s *Blockchain) GetCoin() string {
	return s.Coin
}

// GetName returns the value of Name.
func (s *Blockchain) GetName() string {
	return s.Name
}

// GetTicker returns the value of Ticker.
func (s *Blockchain) GetTicker() string {
	return s.Ticker
}

// GetAtomicUnit returns the value of AtomicUnit.
func (s *Blockchain) GetAtomicUnit() uint16 {
	return s.AtomicUnit
}

// SetCoin sets the value of Coin.
func (s *Blockchain) SetCoin(val string) {
	s.Coin = val
}

// SetName sets the value of Name.
func (s *Blockchain) SetName(val string) {
	s.Name = val
}

// SetTicker sets the value of Ticker.
func (s *Blockchain) SetTicker(val string) {
	s.Ticker = val
}

// SetAtomicUnit sets the value of AtomicUnit.
func (s *Blockchain) SetAtomicUnit(val uint16) {
	s.AtomicUnit = val
}

// Merged schema.
// Ref: #/components/schemas/BlockchainCoinPrice
type BlockchainCoinPrice struct {
	Price                    float64       `json:"price"`
	PriceChange24hPercentage float64       `json:"price_change_24h_percentage"`
	Markets                  []MarketPrice `json:"markets"`
}

// GetPrice returns the value of Price.
func (s *BlockchainCoinPrice) GetPrice() float64 {
	return s.Price
}

// GetPriceChange24hPercentage returns the value of PriceChange24hPercentage.
func (s *BlockchainCoinPrice) GetPriceChange24hPercentage() float64 {
	return s.PriceChange24hPercentage
}

// GetMarkets returns the value of Markets.
func (s *BlockchainCoinPrice) GetMarkets() []MarketPrice {
	return s.Markets
}

// SetPrice sets the value of Price.
func (s *BlockchainCoinPrice) SetPrice(val float64) {
	s.Price = val
}

// SetPriceChange24hPercentage sets the value of PriceChange24hPercentage.
func (s *BlockchainCoinPrice) SetPriceChange24hPercentage(val float64) {
	s.PriceChange24hPercentage = val
}

// SetMarkets sets the value of Markets.
func (s *BlockchainCoinPrice) SetMarkets(val []MarketPrice) {
	s.Markets = val
}

// Merged schema.
// Ref: #/components/schemas/CoinPrice
type CoinPrice struct {
	Price                    float64 `json:"price"`
	PriceChange24hPercentage float64 `json:"price_change_24h_percentage"`
	Coin                     string  `json:"coin"`
}

// GetPrice returns the value of Price.
func (s *CoinPrice) GetPrice() float64 {
	return s.Price
}

// GetPriceChange24hPercentage returns the value of PriceChange24hPercentage.
func (s *CoinPrice) GetPriceChange24hPercentage() float64 {
	return s.PriceChange24hPercentage
}

// GetCoin returns the value of Coin.
func (s *CoinPrice) GetCoin() string {
	return s.Coin
}

// SetPrice sets the value of Price.
func (s *CoinPrice) SetPrice(val float64) {
	s.Price = val
}

// SetPriceChange24hPercentage sets the value of PriceChange24hPercentage.
func (s *CoinPrice) SetPriceChange24hPercentage(val float64) {
	s.PriceChange24hPercentage = val
}

// SetCoin sets the value of Coin.
func (s *CoinPrice) SetCoin(val string) {
	s.Coin = val
}

// Ref: #/components/schemas/Error
type Error struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *Error) GetCode() string {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *Error) SetCode(val string) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val string) {
	s.Message = val
}

func (*Error) getBlockchainSoloBlocksRes() {}

// Merged schema.
// Ref: #/components/schemas/MarketPrice
type MarketPrice struct {
	Price                    float64 `json:"price"`
	PriceChange24hPercentage float64 `json:"price_change_24h_percentage"`
	Ticker                   string  `json:"ticker"`
}

// GetPrice returns the value of Price.
func (s *MarketPrice) GetPrice() float64 {
	return s.Price
}

// GetPriceChange24hPercentage returns the value of PriceChange24hPercentage.
func (s *MarketPrice) GetPriceChange24hPercentage() float64 {
	return s.PriceChange24hPercentage
}

// GetTicker returns the value of Ticker.
func (s *MarketPrice) GetTicker() string {
	return s.Ticker
}

// SetPrice sets the value of Price.
func (s *MarketPrice) SetPrice(val float64) {
	s.Price = val
}

// SetPriceChange24hPercentage sets the value of PriceChange24hPercentage.
func (s *MarketPrice) SetPriceChange24hPercentage(val float64) {
	s.PriceChange24hPercentage = val
}

// SetTicker sets the value of Ticker.
func (s *MarketPrice) SetTicker(val string) {
	s.Ticker = val
}

// Ref: #/components/schemas/MinedBlock
type MinedBlock struct {
	Miner            string `json:"miner"`
	MinerHashrate    string `json:"miner_hashrate"`
	BlockHash        string `json:"block_hash"`
	ShareDifficulty  uint64 `json:"share_difficulty"`
	RoundMinersCount uint32 `json:"round_miners_count"`
	MinedAt          string `json:"mined_at"`
}

// GetMiner returns the value of Miner.
func (s *MinedBlock) GetMiner() string {
	return s.Miner
}

// GetMinerHashrate returns the value of MinerHashrate.
func (s *MinedBlock) GetMinerHashrate() string {
	return s.MinerHashrate
}

// GetBlockHash returns the value of BlockHash.
func (s *MinedBlock) GetBlockHash() string {
	return s.BlockHash
}

// GetShareDifficulty returns the value of ShareDifficulty.
func (s *MinedBlock) GetShareDifficulty() uint64 {
	return s.ShareDifficulty
}

// GetRoundMinersCount returns the value of RoundMinersCount.
func (s *MinedBlock) GetRoundMinersCount() uint32 {
	return s.RoundMinersCount
}

// GetMinedAt returns the value of MinedAt.
func (s *MinedBlock) GetMinedAt() string {
	return s.MinedAt
}

// SetMiner sets the value of Miner.
func (s *MinedBlock) SetMiner(val string) {
	s.Miner = val
}

// SetMinerHashrate sets the value of MinerHashrate.
func (s *MinedBlock) SetMinerHashrate(val string) {
	s.MinerHashrate = val
}

// SetBlockHash sets the value of BlockHash.
func (s *MinedBlock) SetBlockHash(val string) {
	s.BlockHash = val
}

// SetShareDifficulty sets the value of ShareDifficulty.
func (s *MinedBlock) SetShareDifficulty(val uint64) {
	s.ShareDifficulty = val
}

// SetRoundMinersCount sets the value of RoundMinersCount.
func (s *MinedBlock) SetRoundMinersCount(val uint32) {
	s.RoundMinersCount = val
}

// SetMinedAt sets the value of MinedAt.
func (s *MinedBlock) SetMinedAt(val string) {
	s.MinedAt = val
}

// Merged schema.
// Ref: #/components/schemas/MinedBlocksList
type MinedBlocksList struct {
	Limit  uint32       `json:"limit"`
	Offset uint32       `json:"offset"`
	Total  uint32       `json:"total"`
	Blocks []MinedBlock `json:"blocks"`
}

// GetLimit returns the value of Limit.
func (s *MinedBlocksList) GetLimit() uint32 {
	return s.Limit
}

// GetOffset returns the value of Offset.
func (s *MinedBlocksList) GetOffset() uint32 {
	return s.Offset
}

// GetTotal returns the value of Total.
func (s *MinedBlocksList) GetTotal() uint32 {
	return s.Total
}

// GetBlocks returns the value of Blocks.
func (s *MinedBlocksList) GetBlocks() []MinedBlock {
	return s.Blocks
}

// SetLimit sets the value of Limit.
func (s *MinedBlocksList) SetLimit(val uint32) {
	s.Limit = val
}

// SetOffset sets the value of Offset.
func (s *MinedBlocksList) SetOffset(val uint32) {
	s.Offset = val
}

// SetTotal sets the value of Total.
func (s *MinedBlocksList) SetTotal(val uint32) {
	s.Total = val
}

// SetBlocks sets the value of Blocks.
func (s *MinedBlocksList) SetBlocks(val []MinedBlock) {
	s.Blocks = val
}

// Ref: #/components/schemas/MinedSoloBlock
type MinedSoloBlock struct {
	Miner           string `json:"miner"`
	MinerHashrate   string `json:"miner_hashrate"`
	BlockHash       string `json:"block_hash"`
	Reward          uint64 `json:"reward"`
	TxHash          string `json:"tx_hash"`
	ShareDifficulty uint64 `json:"share_difficulty"`
	MinedAt         string `json:"mined_at"`
}

// GetMiner returns the value of Miner.
func (s *MinedSoloBlock) GetMiner() string {
	return s.Miner
}

// GetMinerHashrate returns the value of MinerHashrate.
func (s *MinedSoloBlock) GetMinerHashrate() string {
	return s.MinerHashrate
}

// GetBlockHash returns the value of BlockHash.
func (s *MinedSoloBlock) GetBlockHash() string {
	return s.BlockHash
}

// GetReward returns the value of Reward.
func (s *MinedSoloBlock) GetReward() uint64 {
	return s.Reward
}

// GetTxHash returns the value of TxHash.
func (s *MinedSoloBlock) GetTxHash() string {
	return s.TxHash
}

// GetShareDifficulty returns the value of ShareDifficulty.
func (s *MinedSoloBlock) GetShareDifficulty() uint64 {
	return s.ShareDifficulty
}

// GetMinedAt returns the value of MinedAt.
func (s *MinedSoloBlock) GetMinedAt() string {
	return s.MinedAt
}

// SetMiner sets the value of Miner.
func (s *MinedSoloBlock) SetMiner(val string) {
	s.Miner = val
}

// SetMinerHashrate sets the value of MinerHashrate.
func (s *MinedSoloBlock) SetMinerHashrate(val string) {
	s.MinerHashrate = val
}

// SetBlockHash sets the value of BlockHash.
func (s *MinedSoloBlock) SetBlockHash(val string) {
	s.BlockHash = val
}

// SetReward sets the value of Reward.
func (s *MinedSoloBlock) SetReward(val uint64) {
	s.Reward = val
}

// SetTxHash sets the value of TxHash.
func (s *MinedSoloBlock) SetTxHash(val string) {
	s.TxHash = val
}

// SetShareDifficulty sets the value of ShareDifficulty.
func (s *MinedSoloBlock) SetShareDifficulty(val uint64) {
	s.ShareDifficulty = val
}

// SetMinedAt sets the value of MinedAt.
func (s *MinedSoloBlock) SetMinedAt(val string) {
	s.MinedAt = val
}

// Merged schema.
// Ref: #/components/schemas/MinedSoloBlocksList
type MinedSoloBlocksList struct {
	Limit  uint32           `json:"limit"`
	Offset uint32           `json:"offset"`
	Total  uint32           `json:"total"`
	Blocks []MinedSoloBlock `json:"blocks"`
}

// GetLimit returns the value of Limit.
func (s *MinedSoloBlocksList) GetLimit() uint32 {
	return s.Limit
}

// GetOffset returns the value of Offset.
func (s *MinedSoloBlocksList) GetOffset() uint32 {
	return s.Offset
}

// GetTotal returns the value of Total.
func (s *MinedSoloBlocksList) GetTotal() uint32 {
	return s.Total
}

// GetBlocks returns the value of Blocks.
func (s *MinedSoloBlocksList) GetBlocks() []MinedSoloBlock {
	return s.Blocks
}

// SetLimit sets the value of Limit.
func (s *MinedSoloBlocksList) SetLimit(val uint32) {
	s.Limit = val
}

// SetOffset sets the value of Offset.
func (s *MinedSoloBlocksList) SetOffset(val uint32) {
	s.Offset = val
}

// SetTotal sets the value of Total.
func (s *MinedSoloBlocksList) SetTotal(val uint32) {
	s.Total = val
}

// SetBlocks sets the value of Blocks.
func (s *MinedSoloBlocksList) SetBlocks(val []MinedSoloBlock) {
	s.Blocks = val
}

func (*MinedSoloBlocksList) getBlockchainSoloBlocksRes() {}

// Ref: #/components/schemas/Miner
type Miner struct {
	Address         string `json:"address"`
	Hashrate        string `json:"hashrate"`
	WorkersCount    uint32 `json:"workers_count"`
	BlocksCount     uint32 `json:"blocks_count"`
	SoloBlocksCount uint32 `json:"solo_blocks_count"`
	JoinedAt        string `json:"joined_at"`
	LastActivity    string `json:"last_activity"`
}

// GetAddress returns the value of Address.
func (s *Miner) GetAddress() string {
	return s.Address
}

// GetHashrate returns the value of Hashrate.
func (s *Miner) GetHashrate() string {
	return s.Hashrate
}

// GetWorkersCount returns the value of WorkersCount.
func (s *Miner) GetWorkersCount() uint32 {
	return s.WorkersCount
}

// GetBlocksCount returns the value of BlocksCount.
func (s *Miner) GetBlocksCount() uint32 {
	return s.BlocksCount
}

// GetSoloBlocksCount returns the value of SoloBlocksCount.
func (s *Miner) GetSoloBlocksCount() uint32 {
	return s.SoloBlocksCount
}

// GetJoinedAt returns the value of JoinedAt.
func (s *Miner) GetJoinedAt() string {
	return s.JoinedAt
}

// GetLastActivity returns the value of LastActivity.
func (s *Miner) GetLastActivity() string {
	return s.LastActivity
}

// SetAddress sets the value of Address.
func (s *Miner) SetAddress(val string) {
	s.Address = val
}

// SetHashrate sets the value of Hashrate.
func (s *Miner) SetHashrate(val string) {
	s.Hashrate = val
}

// SetWorkersCount sets the value of WorkersCount.
func (s *Miner) SetWorkersCount(val uint32) {
	s.WorkersCount = val
}

// SetBlocksCount sets the value of BlocksCount.
func (s *Miner) SetBlocksCount(val uint32) {
	s.BlocksCount = val
}

// SetSoloBlocksCount sets the value of SoloBlocksCount.
func (s *Miner) SetSoloBlocksCount(val uint32) {
	s.SoloBlocksCount = val
}

// SetJoinedAt sets the value of JoinedAt.
func (s *Miner) SetJoinedAt(val string) {
	s.JoinedAt = val
}

// SetLastActivity sets the value of LastActivity.
func (s *Miner) SetLastActivity(val string) {
	s.LastActivity = val
}

// Ref: #/components/schemas/MinerBalance
type MinerBalance struct {
	Balance uint64 `json:"balance"`
}

// GetBalance returns the value of Balance.
func (s *MinerBalance) GetBalance() uint64 {
	return s.Balance
}

// SetBalance sets the value of Balance.
func (s *MinerBalance) SetBalance(val uint64) {
	s.Balance = val
}

// Ref: #/components/schemas/MinerWorker
type MinerWorker struct {
	Worker      string `json:"worker"`
	Region      string `json:"region"`
	Agent       string `json:"agent"`
	Solo        bool   `json:"solo"`
	Hashrate    string `json:"hashrate"`
	ConnectedAt string `json:"connected_at"`
}

// GetWorker returns the value of Worker.
func (s *MinerWorker) GetWorker() string {
	return s.Worker
}

// GetRegion returns the value of Region.
func (s *MinerWorker) GetRegion() string {
	return s.Region
}

// GetAgent returns the value of Agent.
func (s *MinerWorker) GetAgent() string {
	return s.Agent
}

// GetSolo returns the value of Solo.
func (s *MinerWorker) GetSolo() bool {
	return s.Solo
}

// GetHashrate returns the value of Hashrate.
func (s *MinerWorker) GetHashrate() string {
	return s.Hashrate
}

// GetConnectedAt returns the value of ConnectedAt.
func (s *MinerWorker) GetConnectedAt() string {
	return s.ConnectedAt
}

// SetWorker sets the value of Worker.
func (s *MinerWorker) SetWorker(val string) {
	s.Worker = val
}

// SetRegion sets the value of Region.
func (s *MinerWorker) SetRegion(val string) {
	s.Region = val
}

// SetAgent sets the value of Agent.
func (s *MinerWorker) SetAgent(val string) {
	s.Agent = val
}

// SetSolo sets the value of Solo.
func (s *MinerWorker) SetSolo(val bool) {
	s.Solo = val
}

// SetHashrate sets the value of Hashrate.
func (s *MinerWorker) SetHashrate(val string) {
	s.Hashrate = val
}

// SetConnectedAt sets the value of ConnectedAt.
func (s *MinerWorker) SetConnectedAt(val string) {
	s.ConnectedAt = val
}

// Merged schema.
// Ref: #/components/schemas/MinersList
type MinersList struct {
	Limit  uint32  `json:"limit"`
	Offset uint32  `json:"offset"`
	Total  uint32  `json:"total"`
	Miners []Miner `json:"miners"`
}

// GetLimit returns the value of Limit.
func (s *MinersList) GetLimit() uint32 {
	return s.Limit
}

// GetOffset returns the value of Offset.
func (s *MinersList) GetOffset() uint32 {
	return s.Offset
}

// GetTotal returns the value of Total.
func (s *MinersList) GetTotal() uint32 {
	return s.Total
}

// GetMiners returns the value of Miners.
func (s *MinersList) GetMiners() []Miner {
	return s.Miners
}

// SetLimit sets the value of Limit.
func (s *MinersList) SetLimit(val uint32) {
	s.Limit = val
}

// SetOffset sets the value of Offset.
func (s *MinersList) SetOffset(val uint32) {
	s.Offset = val
}

// SetTotal sets the value of Total.
func (s *MinersList) SetTotal(val uint32) {
	s.Total = val
}

// SetMiners sets the value of Miners.
func (s *MinersList) SetMiners(val []Miner) {
	s.Miners = val
}

// NewOptFloat64 returns new OptFloat64 with value set to v.
func NewOptFloat64(v float64) OptFloat64 {
	return OptFloat64{
		Value: v,
		Set:   true,
	}
}

// OptFloat64 is optional float64.
type OptFloat64 struct {
	Value float64
	Set   bool
}

// IsSet returns true if OptFloat64 was set.
func (o OptFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat64) SetTo(v float64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat64) Get() (v float64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUint32 returns new OptUint32 with value set to v.
func NewOptUint32(v uint32) OptUint32 {
	return OptUint32{
		Value: v,
		Set:   true,
	}
}

// OptUint32 is optional uint32.
type OptUint32 struct {
	Value uint32
	Set   bool
}

// IsSet returns true if OptUint32 was set.
func (o OptUint32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUint32) Reset() {
	var v uint32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUint32) SetTo(v uint32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUint32) Get() (v uint32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUint32) Or(d uint32) uint32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUint64 returns new OptUint64 with value set to v.
func NewOptUint64(v uint64) OptUint64 {
	return OptUint64{
		Value: v,
		Set:   true,
	}
}

// OptUint64 is optional uint64.
type OptUint64 struct {
	Value uint64
	Set   bool
}

// IsSet returns true if OptUint64 was set.
func (o OptUint64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUint64) Reset() {
	var v uint64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUint64) SetTo(v uint64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUint64) Get() (v uint64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUint64) Or(d uint64) uint64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/Payout
type Payout struct {
	Miner  string `json:"miner"`
	TxHash string `json:"tx_hash"`
	Amount uint64 `json:"amount"`
	PaidAt string `json:"paid_at"`
}

// GetMiner returns the value of Miner.
func (s *Payout) GetMiner() string {
	return s.Miner
}

// GetTxHash returns the value of TxHash.
func (s *Payout) GetTxHash() string {
	return s.TxHash
}

// GetAmount returns the value of Amount.
func (s *Payout) GetAmount() uint64 {
	return s.Amount
}

// GetPaidAt returns the value of PaidAt.
func (s *Payout) GetPaidAt() string {
	return s.PaidAt
}

// SetMiner sets the value of Miner.
func (s *Payout) SetMiner(val string) {
	s.Miner = val
}

// SetTxHash sets the value of TxHash.
func (s *Payout) SetTxHash(val string) {
	s.TxHash = val
}

// SetAmount sets the value of Amount.
func (s *Payout) SetAmount(val uint64) {
	s.Amount = val
}

// SetPaidAt sets the value of PaidAt.
func (s *Payout) SetPaidAt(val string) {
	s.PaidAt = val
}

// Ref: #/components/schemas/PayoutMode
type PayoutMode string

const (
	PayoutModePplns PayoutMode = "pplns"
	PayoutModeProp  PayoutMode = "prop"
)

// AllValues returns all PayoutMode values.
func (PayoutMode) AllValues() []PayoutMode {
	return []PayoutMode{
		PayoutModePplns,
		PayoutModeProp,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PayoutMode) MarshalText() ([]byte, error) {
	switch s {
	case PayoutModePplns:
		return []byte(s), nil
	case PayoutModeProp:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PayoutMode) UnmarshalText(data []byte) error {
	switch PayoutMode(data) {
	case PayoutModePplns:
		*s = PayoutModePplns
		return nil
	case PayoutModeProp:
		*s = PayoutModeProp
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/PayoutsInfo
type PayoutsInfo struct {
	Interval  uint32    `json:"interval"`
	MinPayout OptUint64 `json:"min_payout"`
	MaxPayout OptUint64 `json:"max_payout"`
}

// GetInterval returns the value of Interval.
func (s *PayoutsInfo) GetInterval() uint32 {
	return s.Interval
}

// GetMinPayout returns the value of MinPayout.
func (s *PayoutsInfo) GetMinPayout() OptUint64 {
	return s.MinPayout
}

// GetMaxPayout returns the value of MaxPayout.
func (s *PayoutsInfo) GetMaxPayout() OptUint64 {
	return s.MaxPayout
}

// SetInterval sets the value of Interval.
func (s *PayoutsInfo) SetInterval(val uint32) {
	s.Interval = val
}

// SetMinPayout sets the value of MinPayout.
func (s *PayoutsInfo) SetMinPayout(val OptUint64) {
	s.MinPayout = val
}

// SetMaxPayout sets the value of MaxPayout.
func (s *PayoutsInfo) SetMaxPayout(val OptUint64) {
	s.MaxPayout = val
}

// Merged schema.
// Ref: #/components/schemas/PayoutsList
type PayoutsList struct {
	Limit   uint32   `json:"limit"`
	Offset  uint32   `json:"offset"`
	Total   uint32   `json:"total"`
	Payouts []Payout `json:"payouts"`
}

// GetLimit returns the value of Limit.
func (s *PayoutsList) GetLimit() uint32 {
	return s.Limit
}

// GetOffset returns the value of Offset.
func (s *PayoutsList) GetOffset() uint32 {
	return s.Offset
}

// GetTotal returns the value of Total.
func (s *PayoutsList) GetTotal() uint32 {
	return s.Total
}

// GetPayouts returns the value of Payouts.
func (s *PayoutsList) GetPayouts() []Payout {
	return s.Payouts
}

// SetLimit sets the value of Limit.
func (s *PayoutsList) SetLimit(val uint32) {
	s.Limit = val
}

// SetOffset sets the value of Offset.
func (s *PayoutsList) SetOffset(val uint32) {
	s.Offset = val
}

// SetTotal sets the value of Total.
func (s *PayoutsList) SetTotal(val uint32) {
	s.Total = val
}

// SetPayouts sets the value of Payouts.
func (s *PayoutsList) SetPayouts(val []Payout) {
	s.Payouts = val
}

// Ref: #/components/schemas/Pool
type Pool struct {
	Info   PoolInfo    `json:"info"`
	Stats  PoolStats   `json:"stats"`
	Slaves []PoolSlave `json:"slaves"`
}

// GetInfo returns the value of Info.
func (s *Pool) GetInfo() PoolInfo {
	return s.Info
}

// GetStats returns the value of Stats.
func (s *Pool) GetStats() PoolStats {
	return s.Stats
}

// GetSlaves returns the value of Slaves.
func (s *Pool) GetSlaves() []PoolSlave {
	return s.Slaves
}

// SetInfo sets the value of Info.
func (s *Pool) SetInfo(val PoolInfo) {
	s.Info = val
}

// SetStats sets the value of Stats.
func (s *Pool) SetStats(val PoolStats) {
	s.Stats = val
}

// SetSlaves sets the value of Slaves.
func (s *Pool) SetSlaves(val []PoolSlave) {
	s.Slaves = val
}

// Ref: #/components/schemas/PoolFee
type PoolFee struct {
	Fee     float64    `json:"fee"`
	SoloFee OptFloat64 `json:"solo_fee"`
}

// GetFee returns the value of Fee.
func (s *PoolFee) GetFee() float64 {
	return s.Fee
}

// GetSoloFee returns the value of SoloFee.
func (s *PoolFee) GetSoloFee() OptFloat64 {
	return s.SoloFee
}

// SetFee sets the value of Fee.
func (s *PoolFee) SetFee(val float64) {
	s.Fee = val
}

// SetSoloFee sets the value of SoloFee.
func (s *PoolFee) SetSoloFee(val OptFloat64) {
	s.SoloFee = val
}

// Ref: #/components/schemas/PoolInfo
type PoolInfo struct {
	Blockchain  string      `json:"blockchain"`
	Host        string      `json:"host"`
	Algos       []string    `json:"algos"`
	PayoutMode  PayoutMode  `json:"payout_mode"`
	Solo        bool        `json:"solo"`
	Fee         PoolFee     `json:"fee"`
	PayoutsInfo PayoutsInfo `json:"payouts_info"`
	Agents      []string    `json:"agents"`
}

// GetBlockchain returns the value of Blockchain.
func (s *PoolInfo) GetBlockchain() string {
	return s.Blockchain
}

// GetHost returns the value of Host.
func (s *PoolInfo) GetHost() string {
	return s.Host
}

// GetAlgos returns the value of Algos.
func (s *PoolInfo) GetAlgos() []string {
	return s.Algos
}

// GetPayoutMode returns the value of PayoutMode.
func (s *PoolInfo) GetPayoutMode() PayoutMode {
	return s.PayoutMode
}

// GetSolo returns the value of Solo.
func (s *PoolInfo) GetSolo() bool {
	return s.Solo
}

// GetFee returns the value of Fee.
func (s *PoolInfo) GetFee() PoolFee {
	return s.Fee
}

// GetPayoutsInfo returns the value of PayoutsInfo.
func (s *PoolInfo) GetPayoutsInfo() PayoutsInfo {
	return s.PayoutsInfo
}

// GetAgents returns the value of Agents.
func (s *PoolInfo) GetAgents() []string {
	return s.Agents
}

// SetBlockchain sets the value of Blockchain.
func (s *PoolInfo) SetBlockchain(val string) {
	s.Blockchain = val
}

// SetHost sets the value of Host.
func (s *PoolInfo) SetHost(val string) {
	s.Host = val
}

// SetAlgos sets the value of Algos.
func (s *PoolInfo) SetAlgos(val []string) {
	s.Algos = val
}

// SetPayoutMode sets the value of PayoutMode.
func (s *PoolInfo) SetPayoutMode(val PayoutMode) {
	s.PayoutMode = val
}

// SetSolo sets the value of Solo.
func (s *PoolInfo) SetSolo(val bool) {
	s.Solo = val
}

// SetFee sets the value of Fee.
func (s *PoolInfo) SetFee(val PoolFee) {
	s.Fee = val
}

// SetPayoutsInfo sets the value of PayoutsInfo.
func (s *PoolInfo) SetPayoutsInfo(val PayoutsInfo) {
	s.PayoutsInfo = val
}

// SetAgents sets the value of Agents.
func (s *PoolInfo) SetAgents(val []string) {
	s.Agents = val
}

// Ref: #/components/schemas/PoolSlave
type PoolSlave struct {
	Region      string    `json:"region"`
	Host        string    `json:"host"`
	TCPPort     uint32    `json:"tcp_port"`
	SslPort     uint32    `json:"ssl_port"`
	SoloPort    OptUint32 `json:"solo_port"`
	ConnectedAt string    `json:"connected_at"`
}

// GetRegion returns the value of Region.
func (s *PoolSlave) GetRegion() string {
	return s.Region
}

// GetHost returns the value of Host.
func (s *PoolSlave) GetHost() string {
	return s.Host
}

// GetTCPPort returns the value of TCPPort.
func (s *PoolSlave) GetTCPPort() uint32 {
	return s.TCPPort
}

// GetSslPort returns the value of SslPort.
func (s *PoolSlave) GetSslPort() uint32 {
	return s.SslPort
}

// GetSoloPort returns the value of SoloPort.
func (s *PoolSlave) GetSoloPort() OptUint32 {
	return s.SoloPort
}

// GetConnectedAt returns the value of ConnectedAt.
func (s *PoolSlave) GetConnectedAt() string {
	return s.ConnectedAt
}

// SetRegion sets the value of Region.
func (s *PoolSlave) SetRegion(val string) {
	s.Region = val
}

// SetHost sets the value of Host.
func (s *PoolSlave) SetHost(val string) {
	s.Host = val
}

// SetTCPPort sets the value of TCPPort.
func (s *PoolSlave) SetTCPPort(val uint32) {
	s.TCPPort = val
}

// SetSslPort sets the value of SslPort.
func (s *PoolSlave) SetSslPort(val uint32) {
	s.SslPort = val
}

// SetSoloPort sets the value of SoloPort.
func (s *PoolSlave) SetSoloPort(val OptUint32) {
	s.SoloPort = val
}

// SetConnectedAt sets the value of ConnectedAt.
func (s *PoolSlave) SetConnectedAt(val string) {
	s.ConnectedAt = val
}

// Ref: #/components/schemas/PoolStats
type PoolStats struct {
	MinersCount         uint32    `json:"miners_count"`
	SoloMinersCount     OptUint32 `json:"solo_miners_count"`
	Hashrate            string    `json:"hashrate"`
	AvgHashrate         string    `json:"avg_hashrate"`
	SoloHashrate        OptString `json:"solo_hashrate"`
	SoloAvgHashrate     OptString `json:"solo_avg_hashrate"`
	ShareDifficulty     uint64    `json:"share_difficulty"`
	SoloShareDifficulty OptUint64 `json:"solo_share_difficulty"`
}

// GetMinersCount returns the value of MinersCount.
func (s *PoolStats) GetMinersCount() uint32 {
	return s.MinersCount
}

// GetSoloMinersCount returns the value of SoloMinersCount.
func (s *PoolStats) GetSoloMinersCount() OptUint32 {
	return s.SoloMinersCount
}

// GetHashrate returns the value of Hashrate.
func (s *PoolStats) GetHashrate() string {
	return s.Hashrate
}

// GetAvgHashrate returns the value of AvgHashrate.
func (s *PoolStats) GetAvgHashrate() string {
	return s.AvgHashrate
}

// GetSoloHashrate returns the value of SoloHashrate.
func (s *PoolStats) GetSoloHashrate() OptString {
	return s.SoloHashrate
}

// GetSoloAvgHashrate returns the value of SoloAvgHashrate.
func (s *PoolStats) GetSoloAvgHashrate() OptString {
	return s.SoloAvgHashrate
}

// GetShareDifficulty returns the value of ShareDifficulty.
func (s *PoolStats) GetShareDifficulty() uint64 {
	return s.ShareDifficulty
}

// GetSoloShareDifficulty returns the value of SoloShareDifficulty.
func (s *PoolStats) GetSoloShareDifficulty() OptUint64 {
	return s.SoloShareDifficulty
}

// SetMinersCount sets the value of MinersCount.
func (s *PoolStats) SetMinersCount(val uint32) {
	s.MinersCount = val
}

// SetSoloMinersCount sets the value of SoloMinersCount.
func (s *PoolStats) SetSoloMinersCount(val OptUint32) {
	s.SoloMinersCount = val
}

// SetHashrate sets the value of Hashrate.
func (s *PoolStats) SetHashrate(val string) {
	s.Hashrate = val
}

// SetAvgHashrate sets the value of AvgHashrate.
func (s *PoolStats) SetAvgHashrate(val string) {
	s.AvgHashrate = val
}

// SetSoloHashrate sets the value of SoloHashrate.
func (s *PoolStats) SetSoloHashrate(val OptString) {
	s.SoloHashrate = val
}

// SetSoloAvgHashrate sets the value of SoloAvgHashrate.
func (s *PoolStats) SetSoloAvgHashrate(val OptString) {
	s.SoloAvgHashrate = val
}

// SetShareDifficulty sets the value of ShareDifficulty.
func (s *PoolStats) SetShareDifficulty(val uint64) {
	s.ShareDifficulty = val
}

// SetSoloShareDifficulty sets the value of SoloShareDifficulty.
func (s *PoolStats) SetSoloShareDifficulty(val OptUint64) {
	s.SoloShareDifficulty = val
}
