// Code generated by ogen, DO NOT EDIT.

package apiModels

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [3]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			origElem := elem
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'b': // Prefix: "block"
				origElem := elem
				if l := len("block"); len(elem) >= l && elem[0:l] == "block" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'c': // Prefix: "chains"
					origElem := elem
					if l := len("chains"); len(elem) >= l && elem[0:l] == "chains" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleGetBlockchainsRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

					elem = origElem
				case 's': // Prefix: "s/"
					origElem := elem
					if l := len("s/"); len(elem) >= l && elem[0:l] == "s/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "blockchain"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetBlockchainBlocksRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/solo"
						origElem := elem
						if l := len("/solo"); len(elem) >= l && elem[0:l] == "/solo" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetBlockchainSoloBlocksRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'c': // Prefix: "charts/"
				origElem := elem
				if l := len("charts/"); len(elem) >= l && elem[0:l] == "charts/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "blockchain"
				// Match until "/"
				idx := strings.IndexByte(elem, '/')
				if idx < 0 {
					idx = len(elem)
				}
				args[0] = elem[:idx]
				elem = elem[idx:]

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'm': // Prefix: "miner/"
						origElem := elem
						if l := len("miner/"); len(elem) >= l && elem[0:l] == "miner/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "miner"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[1] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'h': // Prefix: "hashrates"
								origElem := elem
								if l := len("hashrates"); len(elem) >= l && elem[0:l] == "hashrates" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetBlockchainMinerHashratesChartRequest([2]string{
											args[0],
											args[1],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							case 's': // Prefix: "shares"
								origElem := elem
								if l := len("shares"); len(elem) >= l && elem[0:l] == "shares" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetBlockchainMinerSharesChartRequest([2]string{
											args[0],
											args[1],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							case 'w': // Prefix: "worker/"
								origElem := elem
								if l := len("worker/"); len(elem) >= l && elem[0:l] == "worker/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "worker"
								// Match until "/"
								idx := strings.IndexByte(elem, '/')
								if idx < 0 {
									idx = len(elem)
								}
								args[2] = elem[:idx]
								elem = elem[idx:]

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'h': // Prefix: "hashrates"
										origElem := elem
										if l := len("hashrates"); len(elem) >= l && elem[0:l] == "hashrates" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleGetBlockchainMinerWorkerHashratesChartRequest([3]string{
													args[0],
													args[1],
													args[2],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}

										elem = origElem
									case 's': // Prefix: "shares"
										origElem := elem
										if l := len("shares"); len(elem) >= l && elem[0:l] == "shares" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleGetBlockchainMinerWorkerSharesChartRequest([3]string{
													args[0],
													args[1],
													args[2],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}

										elem = origElem
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					case 'p': // Prefix: "pool_"
						origElem := elem
						if l := len("pool_"); len(elem) >= l && elem[0:l] == "pool_" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'd': // Prefix: "difficulties"
							origElem := elem
							if l := len("difficulties"); len(elem) >= l && elem[0:l] == "difficulties" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetBlockchainPoolDifficultiesChartRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						case 's': // Prefix: "stats"
							origElem := elem
							if l := len("stats"); len(elem) >= l && elem[0:l] == "stats" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetBlockchainPoolStatsChartRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					case 'r': // Prefix: "rounds"
						origElem := elem
						if l := len("rounds"); len(elem) >= l && elem[0:l] == "rounds" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetBlockchainRoundsChartRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'm': // Prefix: "miners/"
				origElem := elem
				if l := len("miners/"); len(elem) >= l && elem[0:l] == "miners/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "blockchain"
				// Match until "/"
				idx := strings.IndexByte(elem, '/')
				if idx < 0 {
					idx = len(elem)
				}
				args[0] = elem[:idx]
				elem = elem[idx:]

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleGetBlockchainMinersRequest([1]string{
							args[0],
						}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'm': // Prefix: "miner/"
						origElem := elem
						if l := len("miner/"); len(elem) >= l && elem[0:l] == "miner/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "miner"
						// Leaf parameter
						args[1] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetBlockchainMinerRequest([2]string{
									args[0],
									args[1],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					case 'w': // Prefix: "workers/"
						origElem := elem
						if l := len("workers/"); len(elem) >= l && elem[0:l] == "workers/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "miner"
						// Leaf parameter
						args[1] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetBlockchainMinerWorkersRequest([2]string{
									args[0],
									args[1],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'p': // Prefix: "p"
				origElem := elem
				if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "ayouts/"
					origElem := elem
					if l := len("ayouts/"); len(elem) >= l && elem[0:l] == "ayouts/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "blockchain"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetBlockchainPayoutsRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/balance/"
						origElem := elem
						if l := len("/balance/"); len(elem) >= l && elem[0:l] == "/balance/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "miner"
						// Leaf parameter
						args[1] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetBlockchainMinerBalanceRequest([2]string{
									args[0],
									args[1],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				case 'o': // Prefix: "ools/"
					origElem := elem
					if l := len("ools/"); len(elem) >= l && elem[0:l] == "ools/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 's': // Prefix: "stats"
						origElem := elem
						if l := len("stats"); len(elem) >= l && elem[0:l] == "stats" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetPoolsStatsRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					}
					// Param: "blockchain"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetBlockchainPoolRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'i': // Prefix: "info"
							origElem := elem
							if l := len("info"); len(elem) >= l && elem[0:l] == "info" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetBlockchainPoolInfoRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						case 's': // Prefix: "s"
							origElem := elem
							if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'l': // Prefix: "laves"
								origElem := elem
								if l := len("laves"); len(elem) >= l && elem[0:l] == "laves" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetBlockchainPoolSlavesRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							case 't': // Prefix: "tats"
								origElem := elem
								if l := len("tats"); len(elem) >= l && elem[0:l] == "tats" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetBlockchainPoolStatsRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'r': // Prefix: "rices"
					origElem := elem
					if l := len("rices"); len(elem) >= l && elem[0:l] == "rices" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetPricesRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "blockchain"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetBlockchainMarketsRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			}

			elem = origElem
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	summary     string
	operationID string
	pathPattern string
	count       int
	args        [3]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			origElem := elem
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'b': // Prefix: "block"
				origElem := elem
				if l := len("block"); len(elem) >= l && elem[0:l] == "block" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'c': // Prefix: "chains"
					origElem := elem
					if l := len("chains"); len(elem) >= l && elem[0:l] == "chains" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = "GetBlockchains"
							r.summary = "Get available blockchains list"
							r.operationID = "getBlockchains"
							r.pathPattern = "/blockchains"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				case 's': // Prefix: "s/"
					origElem := elem
					if l := len("s/"); len(elem) >= l && elem[0:l] == "s/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "blockchain"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "GetBlockchainBlocks"
							r.summary = "Get blocks list on blockchain"
							r.operationID = "getBlockchainBlocks"
							r.pathPattern = "/blocks/{blockchain}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/solo"
						origElem := elem
						if l := len("/solo"); len(elem) >= l && elem[0:l] == "/solo" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = "GetBlockchainSoloBlocks"
								r.summary = "Get solo blocks list on blockchain"
								r.operationID = "getBlockchainSoloBlocks"
								r.pathPattern = "/blocks/{blockchain}/solo"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'c': // Prefix: "charts/"
				origElem := elem
				if l := len("charts/"); len(elem) >= l && elem[0:l] == "charts/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "blockchain"
				// Match until "/"
				idx := strings.IndexByte(elem, '/')
				if idx < 0 {
					idx = len(elem)
				}
				args[0] = elem[:idx]
				elem = elem[idx:]

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'm': // Prefix: "miner/"
						origElem := elem
						if l := len("miner/"); len(elem) >= l && elem[0:l] == "miner/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "miner"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[1] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'h': // Prefix: "hashrates"
								origElem := elem
								if l := len("hashrates"); len(elem) >= l && elem[0:l] == "hashrates" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = "GetBlockchainMinerHashratesChart"
										r.summary = "Get miner hashrates chart points"
										r.operationID = "getBlockchainMinerHashratesChart"
										r.pathPattern = "/charts/{blockchain}/miner/{miner}/hashrates"
										r.args = args
										r.count = 2
										return r, true
									default:
										return
									}
								}

								elem = origElem
							case 's': // Prefix: "shares"
								origElem := elem
								if l := len("shares"); len(elem) >= l && elem[0:l] == "shares" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = "GetBlockchainMinerSharesChart"
										r.summary = "Get miner shares chart points"
										r.operationID = "getBlockchainMinerSharesChart"
										r.pathPattern = "/charts/{blockchain}/miner/{miner}/shares"
										r.args = args
										r.count = 2
										return r, true
									default:
										return
									}
								}

								elem = origElem
							case 'w': // Prefix: "worker/"
								origElem := elem
								if l := len("worker/"); len(elem) >= l && elem[0:l] == "worker/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "worker"
								// Match until "/"
								idx := strings.IndexByte(elem, '/')
								if idx < 0 {
									idx = len(elem)
								}
								args[2] = elem[:idx]
								elem = elem[idx:]

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'h': // Prefix: "hashrates"
										origElem := elem
										if l := len("hashrates"); len(elem) >= l && elem[0:l] == "hashrates" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "GET":
												r.name = "GetBlockchainMinerWorkerHashratesChart"
												r.summary = "Get miner worker hashrates chart points"
												r.operationID = "getBlockchainMinerWorkerHashratesChart"
												r.pathPattern = "/charts/{blockchain}/miner/{miner}/worker/{worker}/hashrates"
												r.args = args
												r.count = 3
												return r, true
											default:
												return
											}
										}

										elem = origElem
									case 's': // Prefix: "shares"
										origElem := elem
										if l := len("shares"); len(elem) >= l && elem[0:l] == "shares" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "GET":
												r.name = "GetBlockchainMinerWorkerSharesChart"
												r.summary = "Get miner worker shares chart points"
												r.operationID = "getBlockchainMinerWorkerSharesChart"
												r.pathPattern = "/charts/{blockchain}/miner/{miner}/worker/{worker}/shares"
												r.args = args
												r.count = 3
												return r, true
											default:
												return
											}
										}

										elem = origElem
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					case 'p': // Prefix: "pool_"
						origElem := elem
						if l := len("pool_"); len(elem) >= l && elem[0:l] == "pool_" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'd': // Prefix: "difficulties"
							origElem := elem
							if l := len("difficulties"); len(elem) >= l && elem[0:l] == "difficulties" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetBlockchainPoolDifficultiesChart"
									r.summary = "Get pool difficulties chart points"
									r.operationID = "getBlockchainPoolDifficultiesChart"
									r.pathPattern = "/charts/{blockchain}/pool_difficulties"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 's': // Prefix: "stats"
							origElem := elem
							if l := len("stats"); len(elem) >= l && elem[0:l] == "stats" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetBlockchainPoolStatsChart"
									r.summary = "Get pool stats chart points"
									r.operationID = "getBlockchainPoolStatsChart"
									r.pathPattern = "/charts/{blockchain}/pool_stats"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					case 'r': // Prefix: "rounds"
						origElem := elem
						if l := len("rounds"); len(elem) >= l && elem[0:l] == "rounds" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = "GetBlockchainRoundsChart"
								r.summary = "Get rounds chart points"
								r.operationID = "getBlockchainRoundsChart"
								r.pathPattern = "/charts/{blockchain}/rounds"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'm': // Prefix: "miners/"
				origElem := elem
				if l := len("miners/"); len(elem) >= l && elem[0:l] == "miners/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "blockchain"
				// Match until "/"
				idx := strings.IndexByte(elem, '/')
				if idx < 0 {
					idx = len(elem)
				}
				args[0] = elem[:idx]
				elem = elem[idx:]

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "GetBlockchainMiners"
						r.summary = "Get miners list on blockchain"
						r.operationID = "getBlockchainMiners"
						r.pathPattern = "/miners/{blockchain}"
						r.args = args
						r.count = 1
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'm': // Prefix: "miner/"
						origElem := elem
						if l := len("miner/"); len(elem) >= l && elem[0:l] == "miner/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "miner"
						// Leaf parameter
						args[1] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = "GetBlockchainMiner"
								r.summary = "Get miner info on blockchain"
								r.operationID = "getBlockchainMiner"
								r.pathPattern = "/miners/{blockchain}/miner/{miner}"
								r.args = args
								r.count = 2
								return r, true
							default:
								return
							}
						}

						elem = origElem
					case 'w': // Prefix: "workers/"
						origElem := elem
						if l := len("workers/"); len(elem) >= l && elem[0:l] == "workers/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "miner"
						// Leaf parameter
						args[1] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = "GetBlockchainMinerWorkers"
								r.summary = "Get miner workers list on blockchain"
								r.operationID = "getBlockchainMinerWorkers"
								r.pathPattern = "/miners/{blockchain}/workers/{miner}"
								r.args = args
								r.count = 2
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'p': // Prefix: "p"
				origElem := elem
				if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "ayouts/"
					origElem := elem
					if l := len("ayouts/"); len(elem) >= l && elem[0:l] == "ayouts/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "blockchain"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "GetBlockchainPayouts"
							r.summary = "Get payouts list on blockchain"
							r.operationID = "getBlockchainPayouts"
							r.pathPattern = "/payouts/{blockchain}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/balance/"
						origElem := elem
						if l := len("/balance/"); len(elem) >= l && elem[0:l] == "/balance/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "miner"
						// Leaf parameter
						args[1] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = "GetBlockchainMinerBalance"
								r.summary = "Get miner balance on blockchain"
								r.operationID = "getBlockchainMinerBalance"
								r.pathPattern = "/payouts/{blockchain}/balance/{miner}"
								r.args = args
								r.count = 2
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				case 'o': // Prefix: "ools/"
					origElem := elem
					if l := len("ools/"); len(elem) >= l && elem[0:l] == "ools/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 's': // Prefix: "stats"
						origElem := elem
						if l := len("stats"); len(elem) >= l && elem[0:l] == "stats" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = "GetPoolsStats"
								r.summary = "Get pool statistics for all blockchains"
								r.operationID = "getPoolsStats"
								r.pathPattern = "/pools/stats"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}
					// Param: "blockchain"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "GetBlockchainPool"
							r.summary = "Get full pool data on blockchain"
							r.operationID = "getBlockchainPool"
							r.pathPattern = "/pools/{blockchain}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'i': // Prefix: "info"
							origElem := elem
							if l := len("info"); len(elem) >= l && elem[0:l] == "info" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetBlockchainPoolInfo"
									r.summary = "Get pool info on blockchain"
									r.operationID = "getBlockchainPoolInfo"
									r.pathPattern = "/pools/{blockchain}/info"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 's': // Prefix: "s"
							origElem := elem
							if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'l': // Prefix: "laves"
								origElem := elem
								if l := len("laves"); len(elem) >= l && elem[0:l] == "laves" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = "GetBlockchainPoolSlaves"
										r.summary = "Get pool locations on blockchain"
										r.operationID = "getBlockchainPoolSlaves"
										r.pathPattern = "/pools/{blockchain}/slaves"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							case 't': // Prefix: "tats"
								origElem := elem
								if l := len("tats"); len(elem) >= l && elem[0:l] == "tats" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = "GetBlockchainPoolStats"
										r.summary = "Get pool statistics on blockchain"
										r.operationID = "getBlockchainPoolStats"
										r.pathPattern = "/pools/{blockchain}/stats"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'r': // Prefix: "rices"
					origElem := elem
					if l := len("rices"); len(elem) >= l && elem[0:l] == "rices" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "GetPrices"
							r.summary = "Get blockchains prices list"
							r.operationID = "getPrices"
							r.pathPattern = "/prices"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "blockchain"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = "GetBlockchainMarkets"
								r.summary = "Get blockchain markets"
								r.operationID = "getBlockchainMarkets"
								r.pathPattern = "/prices/{blockchain}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			}

			elem = origElem
		}
	}
	return r, false
}
